<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>content</key>
	<string>
#--
# DEPENDENCIES
#++
%w(${2:}).each {|lib| require lib }
# 

#--
## SINATRA EXTENSIONS
#++
%w(${3:}).each {|ext| require ext }

#--
# DATABASE DEPENDENCIES
#++
%w(${4: 
custom_dm_things_only
}).each { |dblib| require dblib }


module Sinatra

  # == Sinatra::$1 
  # 
  # TODO:: Need to write documentation here
  # 
  # === Usage:
  # 
  # Just require the extension like usual...
  # 
  #   require 'sinatra/${1/(\w*).*/\L$1/}s'
  # 
  # then register the extension as in your sub-classed Sinatra application.
  # 
  #   class YourApp &lt; Sinatra::Base
  #     
  #     register( Sinatra::$1s )
  #     &lt;snip...&gt;
  #   end
  # 
  # See the method definitions for further information.
  # 
  # === Dependencies:
  # 
  # This extension depends on the following:
  # 
  # ==== Ruby Gems:
  # 
  # * ????
  #   * Methods used:
  #     * 
  # 
  # ==== Extensions: 
  # 
  # None
  # 
  # === Configurations:
  # 
  # None
  # 
  # === Routes: 
  # 
  # None
  # 
  # === Code Inspirations:
  # 
  # * 
  # 
  module ${1:ModuleName}
    
    VERSION = '0.1.0' unless const_defined?(:VERSION)
    def self.version; "Sinatra::$1 v#{VERSION}"; end
    
    
    module Helpers
        
      # add your public helper methods here
      def do_something
        ## here
      end
      
      ## PRIVATE METHODS
      private
        
        def private_method
          
        end
      
    end #/ Helpers
    
    # add your general methods here
    
    
    def self.registered(app)
      app.helpers $1::Helpers
      
      ## CONFIGURATIONS::
      # enable custom URL path for this Extension
      app.set :${1/(\w*).*/\L$1/}s_path_prefix, '/${1/(\w*).*/\L$1/}s'
      
      
      # register the extension specific settings for later inspection
      # provided by the Sinatra::AppDebug extension
      if app.respond_to?(:app_debug_register_settings)
        app.app_debug_register_settings :${1/(\w*).*/\L$1/}_foo
      end
      
      ### ROUTES
      
      # add your URI Handlers here like this...
      ## INDEX
      app.get "#{app.${1/(\w*).*/\L$1/}s_path_prefix}/?" do 
        @${1/(\w*).*/\L$1/}s = $1.all # (:order =&gt; [:name])
        erb('${1/(\w*).*/\L$1/}s/index'.to_sym)
      end
      
    end #/ self.registered
    
    
    module Admin
      
      VERSION = Sinatra::$1::VERSION
      def self.version; Sinatra::$1.version.sub(/\sv/,'::Admin v'); end
      
      module Helpers
        
        # add your public helper methods here
        def do_something
          ## here
        end
        
        ## PRIVATE METHODS
        private
          
          def private_method
            
          end
          
      end #/ Helpers
      
      
      def self.registered(app)
        app.helpers $1::Helpers
        app.register(Sinatra::Admin)
        app.helpers $1::Admin::Helpers
        
        ## CONFIGURATIONS::
        # the configuration options here
        app.set :${1/(\w*).*/\L$1/}_admin_foo, 'bar'
        
        
        # register the extension specific settings for later inspection
        # provided by the Sinatra::AppDebug extension
        if app.respond_to?(:app_debug_register_settings)
          app.app_debug_register_settings :${1/(\w*).*/\L$1/}_foo
        end
        
        ### ROUTES
        
        ## INDEX
        # app.get "#{app.admin_path_prefix}/${1/(\w*).*/\L$1/}/?" do 
        #  # add your code here
        #  
        #  admin_erb(admin_view_path('${1/(\w*).*/\L$1/}/index'))
        # end
        
        
        
        
        ## HELP SECTION
        if app.admin_help_enabled 
          # register the section
          app.admin_help_central &lt;&lt; '${1/(\w*).*/\L$1/}'
          
          app.get "#{app.admin_path_prefix}/help/${1/(\w*).*/\L$1/}" do
            admin_erb(admin_view_path('help/${1/(\w*).*/\L$1/}'), :layout =&gt; 'admin/help_layout'.to_sym)
          end
        end
        
      end #/ self.registered
      
    end #/module Admin
    
    
  end #/ $1
  
  # register(Sinatra::$1)
  # register(Sinatra::$1::Admin)
  
end #/ Sinatra
</string>
	<key>name</key>
	<string>Sinatra: Extension Admin (options)</string>
	<key>scope</key>
	<string>source.ruby</string>
	<key>tabTrigger</key>
	<string>sext</string>
	<key>uuid</key>
	<string>0C782EC3-256F-4B8F-9737-9DF261D2C8DB</string>
</dict>
</plist>
