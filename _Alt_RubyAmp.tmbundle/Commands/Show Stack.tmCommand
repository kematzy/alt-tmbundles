<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env sh
cat &lt;&lt;'RUBYEOF' &gt; /tmp/ruby-amp-$$.rb

  def short_path(path, paths_to_display = 2)
    path.split("/")[(-1 - paths_to_display)..(-1)] * "/"
  rescue
    path||""
  end

require "#{ENV["TM_BUNDLE_SUPPORT"]}/lib/ruby_amp.rb"
require "#{ENV["TM_BUNDLE_SUPPORT"]}/lib/ruby_tm_helpers.rb"
require "#{ENV['TM_SUPPORT_PATH']}/lib/ui.rb"


d = RubyAMP::RemoteDebugger.new
exit unless d.connected?

stacks = d.evaluate &lt;&lt;-EOF, :control
  c=Debugger.context; 
  (0..(c.stack_size - 1)).to_a.map do |idx| 
    {
      :file =&gt; c.frame_file(idx), 
      :line =&gt; c.frame_line(idx), 
      :method =&gt; c.frame_method(idx).to_s, 
      :class =&gt; c.frame_class.to_s
    } 
  end
EOF

remote_pwd = d.evaluate("e Dir.pwd")
current_frame = d.current_frame

if stacks.empty?
  puts "Stack trace unavailable"
  exit_show_tool_tip
end

s_index = TextMate::UI.menu(stacks.map_with_index{|s, i| 
  description = []
  description &lt;&lt; s[:class] if s==stacks.first
  description &lt;&lt; s[:method] unless s[:method].empty?
  description = " - " + (description*"#") unless description.empty?

  output = "#{short_path(s[:file])}:#{s[:line]} #{description}"
  if (current_frame==i)
    output = " --&gt; #{output} &lt;--"
  end
  output
})

exit_discard if s_index.nil?

d.evaluate("Debugger.current_frame = #{s_index}", :control)

stack = stacks[s_index]
file = stack[:file]
file.gsub!(/^\.\//, remote_pwd+"/")

tm_open(stack[:file], :line =&gt; stack[:line])
exit_discard

RUBYEOF

${TM_RUBY:-ruby} /tmp/ruby-amp-$$.rb; exit_status=$?; rm /tmp/ruby-amp-$$.rb; exit $exit_status</string>
	<key>input</key>
	<string>none</string>
	<key>keyEquivalent</key>
	<string>~w</string>
	<key>name</key>
	<string>Debug - Show Stack</string>
	<key>output</key>
	<string>showAsTooltip</string>
	<key>scope</key>
	<string>source.ruby, text.html.ruby</string>
	<key>uuid</key>
	<string>74A67B88-E707-4AFD-A0FA-713FCF34D1CD</string>
</dict>
</plist>
