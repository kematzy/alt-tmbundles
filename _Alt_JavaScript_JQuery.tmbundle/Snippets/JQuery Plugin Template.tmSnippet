<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>content</key>
	<string>/**  
 * jQuery ${1:myPlugin} Plugin
 * Version: 0.0.1
 * URL: URL
 * Descripton: DESCRIPTION
 * Requires: JQUERY_VERSION, OTHER_PLUGIN(S), ETC.
 * Author: Kematzy (kematzy.com)
 * Copyright: Copyright (c) 2012 Kematzy Sdn Bhd
 * License: MIT
 *
 * Usage:
 *
 *   // Init element with $1, using the default options.
 *   \$(selector).$1();
 *
 *   // Init element with $1, overriding some default options.
 *   \$(selector).$1({option1:true, option2:'foo'});
 *
 *   // Un-init a previous init of $1 on an element.
 *   \$(selector).$1('destroy');
 *
 *   // Call a public method on an init'd $1 element.
 *   \$(selector).$1('publicMethod2', 'foo', 'bar');
 *
 * For documentation on the supported options, see the bottom of this file.
 */
(function(\$)
{
  // ### CONSTANTS
  var PLUGIN_NAME = '$1';  // TODO: Rename this plugin!
  
  // ### PRIVATE METHODS
  function __myPrivateMethod1(\$this)
  {
    // TODO: Write real private methods.
  }
  
  function __myPrivateMethod2(\$this) 
  {
    // TODO: Write real private methods.
  }
  
  
  // ### PUBLIC METHODS
  var publicMethods = 
  { 
    
    // 
    init: function(options)
    {
      return this.each(function() 
      {
        var opts  = \$.extend({}, \$.fn[PLUGIN_NAME].defaults, options);
        var \$this = \$(this);
        
        // TODO: Perform any setup this plugin needs when first
        //       initialized on an element, e.g.: adding stuff to
        //       the DOM, etc.
        
        // TODO: Initialize your members variables here, to
        //       be stored as data with this jQuery object.
        //       You may wish to store your options here too.
        var data  = \$this.data(PLUGIN_NAME);
        if (!data) 
        {
          \$this.data(PLUGIN_NAME, {
            opts       : opts,
            memberVar1 : true,
            memberVar2 : 'foo'
          });
        }
      
      })
    },
    
    
    destroy: function()
    {
      return this.each(function() 
      {
        var \$this = \$(this);
        var data  = \$this.data(PLUGIN_NAME);
        
        // TODO: If the plugin binds any events, it should bind them using
        //       the plugin's name as a namespace. E.g.: 'resize.$1'.
        //       Uncomment this line to then unbind all events in
        //       this namespace.
        //\$(window).unbind('.' + PLUGIN_NAME);
        
        // TODO: Cleanup anything in data that needs to be cleaned up.
        //       E.g.: removing DOM elements that were added in init.
        \$this.removeData(PLUGIN_NAME);
      }); // /.each(
    },
    
    // This would be called by the user via:
    //
    //   \$(selector).$1('publicMethod1');
    //
    publicMethod1: function()
    {
      return this.each(function() 
      {
        // TODO: Implement real public methods.
        var \$this = \$(this);
        var data  = \$this.data(PLUGIN_NAME);
        
        // Example use of a member variable and a private method.
        if (data.memberVar1)
        {
          __myPrivateMethod1(\$this);
        }
        
        // Example use of options.
        if (data.opts.option1)
        {
          __myPrivateMethod2(\$this);
        }
      }); // /.each()
      
    },
    
    publicMethod2: function(param1, param2)
    {
      return this.each(function()
      {
        // TODO: Implement real public methods.
        var \$this = \$(this);
      }); // /.each()
      
    },
    
  }; // /var publicMethods
  
  // ### PLUGIN INITIALIZATION
  \$.fn[PLUGIN_NAME] = function(method) 
  {
    if (publicMethods[method])
    {
      return publicMethods[method].apply( this, Array.prototype.slice.call(arguments, 1) );
    }
    else if (typeof method == 'object' || !method)
    {
     return publicMethods.init.apply(this, arguments);
    }
    else
    {
      \$.error('Method ' + method + ' does not exist on jQuery.' + PLUGIN_NAME);
    }
    
  };
  
  // ### OPTIONS
  
  // TODO: Implement real options with default values
  //       that will be overridden by 'options' passed to init(),
  //       and comment their meanings here.
  \$.fn[PLUGIN_NAME].defaults = {
    option1 : true,
    option2 : 'foo'
  };
  
})(jQuery);</string>
	<key>name</key>
	<string>JQuery Plugin Template</string>
	<key>scope</key>
	<string>source.js.jquery</string>
	<key>tabTrigger</key>
	<string>plugin</string>
	<key>uuid</key>
	<string>8D928463-30CB-472C-9690-40D7180CCD90</string>
</dict>
</plist>
