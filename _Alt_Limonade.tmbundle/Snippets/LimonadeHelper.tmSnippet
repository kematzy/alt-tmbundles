<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>content</key>
	<string>&lt;?php

/**
* ### LEXT:${1:LextNameSingular}s
* 
* ${2:TODO:: Need to write documentation here}
* 
* ### Installation:
* 
* Add this file to the &lt;tt&gt;app/lib/lexts/&lt;/tt&gt; directory in your app.
* 
*     app
*     |-&gt; lib
*     |    |-&gt; lexts
*     |    |     |-&gt; ${1/(\w*).*/\L$1/}s.lext.php
* 
* ### Usage:
* 
* Just require the Limonade extension in your &lt;tt&gt;app/lib/lexts.php&lt;/tt&gt; file...
* 
*     load_lext('${1/(\w*).*/\L$1/}s');
*     
*     # or
*     
*     require_once(APP_DIR_ROOT . '/lib/lexts/${1/(\w*).*/\L$1/}s.lext.php');
* 
* Then set any custom configurations in the &lt;tt&gt;app/conf/configurations.php&lt;/tt&gt; file...
* 
*     option('${1/(\w*).*/\L$1/}s.lext.custom_configuration', 'custom value');
*     
*     &lt;snip...&gt;
* 
* See the function definitions for further information.
* 
* ### Contents:
* 
* This extension contains the following...
* 
* #### Configuration Options:
* 
* None
* 
* ### Routes: 
* 
* None
* 
* ### Helper Functions:
* 
* None
* 
* ### Copyright
* 
* Copyright (c) `date +%Y` Kematzy. Released under the MIT License.
* 
* See LICENSE for details.
* 
* ### Code Inspirations &amp; Credits:
* 
* 
*/

// -----
// ### CORE DEPENDENCIES

load_core('input', 'validations');

# require_once(APP_DIR_ROOT. '/path/2/file.php');


// -----
// ### EXTENSION DEPENDENCIES

# load_lext();
# require_once(APP_DIR_ROOT. '/lib/lexts/file.lext.php');

// -----
// ### CONFIGURATION OPTIONS 

// the $1 Lext version $0
option('${1/(\w*).*/\L$1/}s.lext.version', '0.0.1');
option('${1/(\w*).*/\L$1/}s.lext.version.string', 'Kematzy::Lext::${1/(\w*).*/\u$1/} v' . option('${1/(\w*).*/\L$1/}s.lext.version') );

# //
# if ( option_undefined('${1/(\w*).*/\L$1/}s.lext.????') )                         { option('${1/(\w*).*/\L$1/}s.lext.????', '????'); }


// -----
// #### APP PATHS

// the default path to the $1 Section
if ( option_undefined('${1/(\w*).*/\L$1/}s.path.prefix') )                       { option('${1/(\w*).*/\L$1/}s.path.prefix', '/${1/(\w*).*/\L$1/}s'); }


if ( option_defined('admin.enabled') )
{ 
  // -----
  // #### ADMIN PATHS
  
  // the default path to the $1 Admin Section
  if ( option_undefined('${1/(\w*).*/\L$1/}s.admin.path.prefix') )               { option('${1/(\w*).*/\L$1/}s.admin.path.prefix', option('admin.path.prefix') . '/${1/(\w*).*/\L$1/}s'); }
  // the default redirect path after an Admin action
  if ( option_undefined('${1/(\w*).*/\L$1/}s.path.redirect_to') )                { option('${1/(\w*).*/\L$1/}s.path.redirect_to', option('${1/(\w*).*/\L$1/}s.admin.path.prefix') ); }
    
}


// -----
// ### DB SETUP


# CREATE TABLE "${1/(\w*).*/\L$1/}s" (
# "id" INTEGER PRIMARY KEY AUTOINCREMENT DEFAULT NULL,
# 
# 
# "created_at" DATETIME DEFAULT NULL,
# "updated_at" DATETIME DEFAULT NULL
# )

/**
* TODO: write documentation for class
* 
* @package (default)
* 
* &lt;strong&gt;Examples&lt;/strong&gt;
* 
*     &lt;sample code&gt;...
* 
*/
class ${1/(\w*).*/\u$1/} extends DBModel
{ 
  public static \$__timestamps = true;
  
  # public function model_singular()  { return \$this-&gt;has_one('ModelSingular'); }
  # public function model_plural()    { return \$this-&gt;has_many('ModelSingular'); }
  # public function author()          { return \$this-&gt;belongs_to('${1/(\w*).*/\u$1/}', '${1/(\w*).*/\L$1/}_id'); }
  # public function parent()          { return \$this-&gt;belongs_to('${1/(\w*).*/\u$1/}', 'parent_id'); }
  # public function children()        { return \$this-&gt;has_many('${1/(\w*).*/\u$1/}', 'parent_id'); }
  # public function roles()           { return \$this-&gt;has_and_belongs_to_many('Role', 'user_roles'); }
  
  
  static function init(\$vars = array())
  {
    return new ${1/(\w*).*/\u$1/}( \$vars );
  }
  
} #/ class ${1/(\w*).*/\u$1/} DBModel


// -----
// ### ROUTES =&gt; PUBLIC


# GET &lt;strong&gt;/${1/(\w*).*/\U$1/}S/&lt;/strong&gt;
dispatch_get( option('${1/(\w*).*/\L$1/}s.path.prefix'), 'route_get_${1/(\w*).*/\L$1/}s_index');
function route_get_${1/(\w*).*/\L$1/}s_index() { 
  page_load_vars('${1/(\w*).*/\L$1/}s');
  return html('${1/(\w*).*/\L$1/}s/index.html');
}


if ( option('admin.enabled') ) 
{ 
  // -----
  // #### ROUTES =&gt; ADMIN
  
  # &lt;strong&gt;GET ADMIN/${1/(\w*).*/\U$1/}S/INDEX&lt;/strong&gt;
  dispatch( option('${1/(\w*).*/\L$1/}s.admin.path.prefix') , 'route_get_${1/(\w*).*/\L$1/}s_admin_index', admin_route_options() );
  function route_get_${1/(\w*).*/\L$1/}s_admin_index(){ 
    set('${1/(\w*).*/\L$1/}s',  ${1/(\w*).*/\u$1/}::all() );
    page_load_vars('admin|${1/(\w*).*/\L$1/}s');
    return admin_html('${1/(\w*).*/\L$1/}s/index.html');
  }
  
  # &lt;strong&gt;GET ADMIN/${1/(\w*).*/\U$1/}S/NEW&lt;/strong&gt;
  dispatch( option('${1/(\w*).*/\L$1/}s.admin.path.prefix') . '/new', 'route_get_${1/(\w*).*/\L$1/}s_admin_new', admin_route_options() );
  function route_get_${1/(\w*).*/\L$1/}s_admin_new(){ 
    page_load_vars('admin|${1/(\w*).*/\L$1/}s|new');
    # retrieve from session or create new one.
    \$${1/(\w*).*/\L$1/} = input_session_or_default('${1/(\w*).*/\L$1/}', ${1/(\w*).*/\u$1/}::init() );
    set('${1/(\w*).*/\L$1/}',  \$${1/(\w*).*/\L$1/});
    if ( request_is_xhr() ) 
    {  
      return admin_html('${1/(\w*).*/\L$1/}s/new.html', null);
    }
    else
    { 
      return admin_html('${1/(\w*).*/\L$1/}s/new.html');
    }
  }

  # &lt;strong&gt;POST ADMIN/${1/(\w*).*/\U$1/}S/&lt;/strong&gt;
  dispatch_post( option('${1/(\w*).*/\L$1/}s.admin.path.prefix'), 'route_post_${1/(\w*).*/\L$1/}s_admin_create', admin_route_options() );
  function route_post_${1/(\w*).*/\L$1/}s_admin_create(){ 
    \$${1/(\w*).*/\L$1/} = input_post('${1/(\w*).*/\L$1/}');
    \$res = ${1/(\w*).*/\L$1/}s_add_${1/(\w*).*/\L$1/}( \$${1/(\w*).*/\L$1/} );
    if ( request_is_xhr() ) 
    { 
      if (\$res == true) 
      { 
        return json( array('success' =&gt; true, 'html'=&gt; "Successfully created ${1/(\w*).*/\u$1/} [".\$${1/(\w*).*/\L$1/}['name']."]") );
      }
      else
      { 
        return json( array('success' =&gt; false, 'html'=&gt; "Error creating ${1/(\w*).*/\u$1/} [".\$${1/(\w*).*/\L$1/}['name']."]") );
      }
    }
    else
    { 
      if ( \$res == true ) 
      { 
        flash('success', "Successfully created a new ${1/(\w*).*/\u$1/}");
        redirect_to( option('${1/(\w*).*/\L$1/}s.admin.path.prefix') );
      }
      else
      { 
        \$_SESSION['${1/(\w*).*/\L$1/}'] = \$${1/(\w*).*/\L$1/};
        flash('error', "Unable to create a new ${1/(\w*).*/\u$1/} due to these errors:&lt;br&gt;\n " . \$res['validation_errors'] );
        redirect_to( option('${1/(\w*).*/\L$1/}s.admin.path.prefix') . '/new' );
      }
    }
  }

  # &lt;strong&gt;GET ADMIN/${1/(\w*).*/\U$1/}S/LOAD&lt;/strong&gt;
  # LOAD (something via AJAX most likely JEditable)
  dispatch_get( option('${1/(\w*).*/\L$1/}s.admin.path.prefix') .'/load', 'route_get_${1/(\w*).*/\L$1/}s_admin_ajax_load', admin_route_options() );
  function route_get_${1/(\w*).*/\L$1/}s_admin_ajax_load(){ 
    if ( request_is_xhr() ) 
    { 
      list(\$model, \$field, \$id) = explode('-', @LGET('id'));
      \$model = ${1/(\w*).*/\u$1/}::find( (int) \$id);
      return ( \$model === false ) ? "ERROR: " . @LGET('id') . " and ${1/(\w*).*/\L$1/} [". _dump(\$model)."]"  :  \$model-&gt;\$field;
    }
    else
    {
      halt(NOT_FOUND);
    }
  }

  # &lt;strong&gt;GET ADMIN/${1/(\w*).*/\U$1/}S/:ID/EDIT&lt;/strong&gt;
  dispatch_get( option('${1/(\w*).*/\L$1/}s.admin.path.prefix') .'/:${1/(\w*).*/\L$1/}/edit', 'route_get_${1/(\w*).*/\L$1/}s_admin_edit', admin_route_options() );
  function route_get_${1/(\w*).*/\L$1/}s_admin_edit(){ 
    page_load_vars('admin|${1/(\w*).*/\L$1/}|edit');
    set('${1/(\w*).*/\L$1/}', ${1/(\w*).*/\u$1/}::where_${1/(\w*).*/\L$1/}( params('${1/(\w*).*/\L$1/}') )-&gt;first() );
    if ( request_is_xhr() ) 
    {  
      return admin_html('${1/(\w*).*/\L$1/}s/edit.html', null);
    }
    else
    {
      return admin_html('${1/(\w*).*/\L$1/}s/edit.html');
    }
  }
  
  # &lt;strong&gt;PUT ADMIN/${1/(\w*).*/\U$1/}S/:ID&lt;/strong&gt;
  dispatch_put( option('${1/(\w*).*/\L$1/}s.admin.path.prefix') . '/:id', 'route_put_${1/(\w*).*/\L$1/}s_admin_update', admin_route_options() );
  function route_put_${1/(\w*).*/\L$1/}s_admin_update() { 
    \$${1/(\w*).*/\L$1/} = input_post('${1/(\w*).*/\L$1/}');
    \$res = ${1/(\w*).*/\L$1/}s_update_${1/(\w*).*/\L$1/}( params('id'), \$${1/(\w*).*/\L$1/} );
    if ( request_is_xhr() ) 
    { 
      if (\$res == true) 
      { 
        return json( array('success' =&gt; true, 'html'=&gt; "Successfully updated the ${1/(\w*).*/\u$1/} [".\$${1/(\w*).*/\L$1/}['name'] ."]") );
      }
      else
      { 
        return json( array('success' =&gt; false, 'html'=&gt; "ERRORS updating the ${1/(\w*).*/\u$1/} [".\$${1/(\w*).*/\L$1/}['name']."]") );
      }
    }
    else
    { 
      if ( \$res == true ) 
      { 
        flash('success', "Successfully updated the ${1/(\w*).*/\u$1/}");
        redirect_to( option('${1/(\w*).*/\L$1/}s.admin.path.prefix') );
      }
      else
      { 
         \$_SESSION['${1/(\w*).*/\L$1/}'] = \$${1/(\w*).*/\L$1/};
         flash('error', "Unable to update ${1/(\w*).*/\u$1/} due to these errors:&lt;br&gt;\n " . \$res-&gt;validation_errors );
         redirect_to( option('${1/(\w*).*/\L$1/}s.admin.path.prefix') . params('id') . '/edit' );
      }
    }
  
  }

  # &lt;strong&gt;GET ADMIN/${1/(\w*).*/\U$1/}S/:ID SHOW&lt;/strong&gt;
  dispatch_get( option('${1/(\w*).*/\L$1/}s.admin.path.prefix') .'/:id', 'route_get_${1/(\w*).*/\L$1/}s_admin_show', admin_route_options() );
  function route_get_${1/(\w*).*/\L$1/}s_admin_show(){ 
    try 
    { 
      \$${1/(\w*).*/\L$1/} =  ${1/(\w*).*/\u$1/}::find( params('id') );
      if ( \$${1/(\w*).*/\L$1/} == false ) { halt(NOT_FOUND, "No such ${1/(\w*).*/\u$1/} found"); }
      
      set('${1/(\w*).*/\L$1/}', \$${1/(\w*).*/\L$1/} );
      # //${1/(\w*).*/\L$1/}s_set_page_vars(\$${1/(\w*).*/\L$1/});
    
      if ( request_is_xhr() ) 
      {   
        return admin_html('${1/(\w*).*/\L$1/}s/show.html', null);
      }
      else
      { 
        return admin_html('${1/(\w*).*/\L$1/}s/show.html');
      }
    } 
    catch (Exception \$e) 
    { 
      halt(NOT_FOUND, "No such ${1/(\w*).*/\u$1/} found. ||  Exception[". \$e-&gt;getMessage() ."]");
    }
  }

  # &lt;strong&gt;DELETE ADMIN/${1/(\w*).*/\U$1/}S/:ID&lt;/strong&gt;
  dispatch_delete( option('${1/(\w*).*/\L$1/}s.admin.path.prefix') . '/:id', 'route_delete_${1/(\w*).*/\L$1/}s_admin_destroy', admin_route_options() );
  function route_delete_${1/(\w*).*/\L$1/}s_admin_destroy() { 
    \$res = ${1/(\w*).*/\u$1/}::destroy( params('id') );
    if ( request_is_xhr() ) 
    { 
      return ( \$res === true ) ? 1 : false;
    }
    else
    { 
      if ( \$res == true ) 
      { 
        flash('success', "Successfully deleted the ${1/(\w*).*/\u$1/}");
        redirect_to( option('${1/(\w*).*/\L$1/}s.admin.path.prefix') );
      }
      else
      { 
         flash('error', "Unable to deleted ${1/(\w*).*/\u$1/} due to these errors:&lt;br&gt;\n " . \$res['validation_errors'] );
         redirect_to( option('${1/(\w*).*/\L$1/}s.admin.path.prefix') );
      }
    }
  }

}

// -----
// ### HELPER FUNCTIONS 

// Custom functions related to this LEXT added here...

/**
* 
* 
* &lt;strong&gt;Params&lt;/strong&gt;
* 
* 
* @return (mixed) =&gt; 
* 
* &lt;strong&gt;Examples&lt;/strong&gt;
* 
*   
* 
* @api public/private
*/
# function ${1/(\w*).*/\L$1/}_function(\$value = '')
# { 
#   return \$value;
# }

/**
* 
* 
* &lt;strong&gt;Params&lt;/strong&gt;
* 
* 
* @return (mixed) =&gt; 
* 
* &lt;strong&gt;Examples&lt;/strong&gt;
* 
*   
* 
* @api public
*/
function ${1/(\w*).*/\L$1/}s_add_${1/(\w*).*/\L$1/}(\$values) 
{ 
  # Validate the hell out of the Model here...
  \$validation_rules = array(
      # 'name'  =&gt; 'required|max:50',
      # 'username'  =&gt; 'required|max:50|min:4',
      # 'email' =&gt; 'required|email|max:255',
      # # 'email' =&gt; 'required|email|unique:users',
  );
  \$validator = Validator::make(\$values, \$validation_rules);
  if ( ! \$validator-&gt;valid() ) 
  { 
    return array('validation_errors' =&gt; \$validator-&gt;errors ); 
  }
  else
  {
    try { 
      \$${1/(\w*).*/\L$1/} = new ${1/(\w*).*/\u$1/}(\$values);
      \$${1/(\w*).*/\L$1/}-&gt;save();
      return ${1/(\w*).*/\u$1/}::find(\$${1/(\w*).*/\L$1/}-&gt;id);
    } catch (Exception \$e) { 
      halt(SERVER_ERROR, "Database Error: " . \$e-&gt;getMessage() );
    }
  }
}

/**
* 
* 
* &lt;strong&gt;Params&lt;/strong&gt;
* 
* 
* @return (mixed) =&gt; 
* 
* &lt;strong&gt;Examples&lt;/strong&gt;
* 
*   
* 
* @api public
*/
function ${1/(\w*).*/\L$1/}s_update_${1/(\w*).*/\L$1/}(\$id, \$values) 
{ 
  # Validate the hell out of the Model here...
  \$validation_rules = array(
      # 'name'  =&gt; 'required|max:50',
      # 'username'  =&gt; 'required|max:50|min:4',
      # 'email' =&gt; 'required|email|max:255',
      # # 'email' =&gt; 'required|email|unique:users',
  );
  \$validator = Validator::make(\$values, \$validation_rules);
  if ( ! \$validator-&gt;valid() ) 
  { 
    return array('validation_errors' =&gt; \$validator-&gt;errors ); 
  }
  else
  { 
    try { 
      return ${1/(\w*).*/\u$1/}::find(\$id)-&gt;update(\$values);
    } catch (Exception \$e) { 
      halt(SERVER_ERROR, "Database Error: " . \$e-&gt;getMessage() );
    }
    
  }
}


// -----
// ### EMBEDDED VIEWS


/**
* TODO:: Need to write documentation here
* 
*/
# function _${1/(\w*).*/\L$1/}_views_name_of_view_format()
# { 
#   ? &gt;&lt;p&gt;HTML code goes here.&lt;/p&gt;&lt; ? php
# }




# /EOF ${1/(\w*).*/\U$1/}.LEXT
?&gt;</string>
	<key>name</key>
	<string>Limonade Extension - Admin REST</string>
	<key>tabTrigger</key>
	<string>.lext</string>
	<key>uuid</key>
	<string>E3ABB804-E38D-4ABB-9AAB-A9A72C1DB48F</string>
</dict>
</plist>
