<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>
    Provides better folding abilities
    
        
	TODO: unresolved issues

	text:
	"p &lt;&lt; end
	print me!
	end"
	symptoms:
	not recognized as a heredoc
	solution:
	there is no way to distinguish perfectly between the &lt;&lt; operator and the start
	of a heredoc. Currently, we require assignment to recognize a heredoc. More
	refinement is possible.
	• Heredocs with indented terminators (&lt;&lt;-) are always distinguishable, however.
	• Nested heredocs are not really supportable at present

	text:
	print &lt;&lt;-'THERE' 
	This is single quoted. 
	The above used #{Time.now} 
	THERE 
	symtoms:
	From Programming Ruby p306; should be a non-interpolated heredoc.
	
	text:
	"a\332a"
	symptoms:
	'\332' is not recognized as slash3.. which should be octal 332.
	solution:
	plain regexp.. should be easy.

    text:
    val?(a):p(b)
    val?'a':'b'
    symptoms:
    ':p' is recognized as a symbol.. its 2 things ':' and 'p'.
    :'b' has same problem.
    solution:
    ternary operator rule, precedence stuff, symbol rule.
    but also consider 'a.b?(:c)' ??
</string>
	<key>fileTypes</key>
	<array>
		<string>rb</string>
		<string>rbx</string>
		<string>Rakefile</string>
		<string>rake</string>
		<string>cgi</string>
		<string>fcgi</string>
		<string>gemspec</string>
		<string>irbrc</string>
		<string>capfile</string>
		<string>tt</string>
		<string>rb.tt</string>
	</array>
	<key>firstLineMatch</key>
	<string>^#!/.*\bruby\b</string>
	<key>foldingStartMarker</key>
	<string>(?x)^
	    (\s*+
	        (module|class|def(?!.*\bend\s*$)
	        |unless|if
	        |case
	        |begin
	        |for|while|until
	         |^=begin
	        |(  "(\\.|[^"])*+"          # eat a double quoted string
	         | '(\\.|[^'])*+'        # eat a single quoted string
	         |   [^#"']                # eat all but comments and strings
	         )*
	         (                        \s   (do|begin|case)
	         | (?&lt;!\$)[-+=&amp;|*/~%^&lt;&gt;~] \s*+ (if|unless)
	         )
	        )\b
	        (?! [^;]*+ ; .*? \bend\b )
	    |(  "(\\.|[^"])*+"              # eat a double quoted string
	     | '(\\.|[^'])*+'            # eat a single quoted string
	     |   [^#"']                    # eat all but comments and strings
	     )*
	     ( \{ (?!  [^}]*+ \} )
	     | \[ (?! [^\]]*+ \] )
	     )
	    ).*$
	|   [#] .*? \(fold\) \s*+ $         # Sune’s special marker
	</string>
	<key>foldingStopMarker</key>
	<string>(?x)
		(   (^|;) \s*+ end   \s*+ ([#].*)? $
		|   (^|;) \s*+ end \. .* $
		|   ^     \s*+ [}\]] ,? \s*+ ([#]?.*)? $
		|   [#] .*? \(end\) \s*+ $    # Sune’s special marker
		|   ^=end
		)</string>
	<key>keyEquivalent</key>
	<string>^~R</string>
	<key>name</key>
	<string> Ruby </string>
	<key>patterns</key>
	<array>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.class.ruby</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.class.ruby</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.ruby</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.inheritance.ruby</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>variable.other.object.ruby</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.variable.ruby</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(class)\s+(([.a-zA-Z0-9_:]+(\s*(&lt;)\s*[.a-zA-Z0-9_:]+)?)|((&lt;&lt;)\s*[.a-zA-Z0-9_:]+))</string>
			<key>name</key>
			<string>meta.class.ruby</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.module.ruby</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.module.ruby</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.module.first.ruby</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.inheritance.ruby</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.module.second.ruby</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.inheritance.ruby</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.module.third.ruby</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.inheritance.ruby</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(module)\s+(([A-Z]\w*(::))?([A-Z]\w*(::))?([A-Z]\w*(::))*[A-Z]\w*)</string>
			<key>name</key>
			<string>meta.module.ruby</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>else if is a common mistake carried over from other languages. it works if you put in a second end, but it’s never what you want.</string>
			<key>match</key>
			<string>(?&lt;!\.)\belse(\s)+if\b</string>
			<key>name</key>
			<string>invalid.deprecated.ruby</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>everything being a reserved word, not a value and needing a 'end' is a..</string>
			<key>match</key>
			<string>(?&lt;!\.)\b(BEGIN|begin|case|class|else|elsif|END|end|ensure|for|if|in|module|rescue|then|unless|until|when|while)\b(?![?!])</string>
			<key>name</key>
			<string>keyword.control.ruby</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>contextual smart pair support for block parameters</string>
			<key>match</key>
			<string>(?&lt;!\.)\bdo\b\s*</string>
			<key>name</key>
			<string>keyword.control.start-block.ruby</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>contextual smart pair support</string>
			<key>match</key>
			<string>(?&lt;=\{)(\s+)</string>
			<key>name</key>
			<string>meta.syntax.ruby.start-block</string>
		</dict>
		<dict>
			<key>comment</key>
			<string> as above, just doesn't need a 'end' and does a logic operation</string>
			<key>match</key>
			<string>(?&lt;!\.)\b(and|not|or)\b</string>
			<key>name</key>
			<string>keyword.operator.logical.ruby</string>
		</dict>
		<dict>
			<key>comment</key>
			<string> just as above but being not a logical operation</string>
			<key>match</key>
			<string>(?&lt;!\.)\b(alias|alias_method|break|next|redo|retry|return|super|undef|yield)\b(?![?!])|\bdefined\?|\bblock_given\?</string>
			<key>name</key>
			<string>keyword.control.pseudo-method.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(nil|true|false)\b(?![?!])</string>
			<key>name</key>
			<string>constant.language.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(__(FILE|LINE)__|self)\b(?![?!])</string>
			<key>name</key>
			<string>variable.language.ruby</string>
		</dict>
		<dict>
			<key>comment</key>
			<string> everything being a method but having a special function is a..</string>
			<key>match</key>
			<string>\b(initialize|new|loop|include|extend|raise|attr_reader(_ref)?|attr_writer|attr_accessor|attr_overridable|attr|catch|throw|private|module_function|public|protected)\b(?![?!])</string>
			<key>name</key>
			<string>keyword.other.special-method.ruby</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(require|gem)\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.special-method.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>$|(?=#)</string>
			<key>name</key>
			<string>meta.require.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.variable.ruby</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(@)[a-zA-Z_]\w*</string>
			<key>name</key>
			<string>variable.other.readwrite.instance.ruby</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.variable.ruby</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(@@)[a-zA-Z_]\w*</string>
			<key>name</key>
			<string>variable.other.readwrite.class.ruby</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.variable.ruby</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\$)[a-zA-Z_]\w*</string>
			<key>name</key>
			<string>variable.other.readwrite.global.ruby</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.variable.ruby</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\$)(!|@|&amp;|`|'|\+|\d+|~|=|/|\\|,|;|\.|&lt;|&gt;|_|\*|\$|\?|:|"|-[0adFiIlpv])</string>
			<key>name</key>
			<string>variable.other.readwrite.global.pre-defined.ruby</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(ENV)\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.constant.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>name</key>
			<string>meta.environment-variable.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(ACL|Abbrev|Acceptables|AmbiguousArgument|AmbiguousOption|ArguableArgumentError |Array|Base64|BasicSocket|Benchmark|Bignum|Binding|CGI|CONST1|CONST2|CONST3|CSV|Class|Comparable|CompletingHash|Complex|ConditionVariable|Continuation|DEBUGGER__|DOT|DRb|Data|DateTime|Date|DefaultDisplay|Delegator|Dir|EOFError|ERB|EXCEL_CONST|Enumerable|Errno|Exception2MessageMapper|Exception|FalseClass|FileTest|FileUtils|File|Finalizer|Find|Fixnum|FloatDomainError|Float|Foo|Forwardable|GC|GServer|Generators|Generator|GetoptLong|Hash|IE_CONST|IOError|IO|IPAddr|IPSocket|IRB|IXMLDOMAttribute|IXMLDOMCDATASection|IXMLDOMCharacterData|IXMLDOMComment|IXMLDOMDocument|IXMLDOMDocumentFragment|IXMLDOMDocumentType|IXMLDOMElement|IXMLDOMEntity|IXMLDOMEntityReference|IXMLDOMImplementation|IXMLDOMNamedNodeMap|IXMLDOMNodeList|IXMLDOMNode|IXMLDOMNotation|IXMLDOMParseError|IXMLDOMProcessingInstruction|IXMLDOMText|IXMLHttpRequest|IXTLRuntime|Iconv|IndexError|Integer|Interrupt|InvalidArgument|InvalidOption|Kconv|Kernel|List|LoadError|LocalJumpError|Logger|Logging|Mail|Marshal|MatchData|Math|Matrix|Method|Microsoft_FreeThreadedXMLDOM_1_0|Microsoft_XMLDOM_1_0|Microsoft_XMLDSO_1_0|Microsoft_XMLHTTP_1|MissingArgument|Module|Monitor|MonitorMixin|Msxml|Mutex_m|Mutex|MyExcel|NKF|NameDescriptor|NameError|NeedlessArgument|Net|NilClass|NoMemoryError|NoMethodError|NotImplementedError|Numeric|OLEProperty|OLESERVER|OLEtagDOMNodeType|OLEtagXMLEMEM_TYPE|ObjectSpace|Object|Observable|Open3|OpenStruct|OpenURI|OptionParser|Options|PP|PStore|ParseDate|ParseError|Pathname|Ping|Precision|PrettyPrint|Prime|Process|Proc|Profiler__|Queue|RDoc|REXML|RI|RSS|RUNIT|Racc|RangeError|Range|Rational|RegAnd|RegOr|RegexpError|Regexp|Resolv|RiDisplay|RiDriver|RiError|Rinda|RubyLex|RubyToken|RuntimeError|SOAP|SOCKSSocket|Scanf|ScriptError|SecurityError|Set|Shellwords|Shell|SignalException|Signal|SimpleDelegator|SingleForwardable|SingletonClassMethods|Singleton|SizedQueue|SocketError|Socket|SortedSet|StandardError|StringIO|StringScanner|String|Struct|Symbol|SyncEnumerator|Sync_m|Sync|SyntaxError|SystemCallError|SystemExit|SystemStackError|TCPServer|TCPSocket|TSort|Tempfile|TemplatePage|TestMyExcel|TestNIL2VT_EMPTY|TestOLEMETHOD|TestOLEPARAM|TestOLETYPE|TestOLEVARIABLE|TestWIN32OLE_EVENT|TestWIN32OLE_FOR_PROPERTYPUTREF|TestWIN32OLE_PROPERTYPUTREF|TestWIN32OLE_WITH_WORD|TestWin32OLE|TestWin32OLE_VARIANT|TestWin32OLE_WITH_MSI|ThreadError|ThreadGroup|ThreadsWait|Thread|Timeout|Time|TokenStream|Tracer|TrueClass|TruncatedDataError|TypeError|UDPSocket|UNIXServer|UNIXSocket|URI|UnboundMethod|Vector|WEBrick|WIN32COMGen|WIN32OLERuntimeError|WIN32OLE_EVENT|WIN32OLE_METHOD|WIN32OLE_PARAM|WIN32OLE_TYPE|WIN32OLE_VARIABLE|WIN32OLE|WSDL|WeakRef|XMLEncoding_ja|XML|XMP|XSD|YAML|ZeroDivisionError|Zlib)(?=((\.|::)[A-Za-z]|\[))</string>
			<key>name</key>
			<string>support.class.core.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>::\b(AAAA|ACLEntry|ACLList|ANY|APOP|ASPDotNetHandler|Abort|AbstractServlet|AbstructNotifier|AccessLogError|AccessLog|Address|AliasName|Alias|AllReferences|All|AmbigousOption|Annotation|AnonClass|AnsiFormatter|AnyMethod|Any|AppendFile|AppendIO|ApplicationScopeOperation|Application|ArrayFactory_|ArrayIndexOutOfBoundsError|ArrayStoreError|AssertionFailedError|Assertions|Assert|Assigner|AttachmentFactory|Attachment|AttlistDecl|AttrChanger|AttrChar|AttrSpan|AttributeConstraintError|AttributeFormatter|AttributeManager|AttributeString|Attributes|Attribute|Attr|Authenticator|AutoRunner|BacktraceFilter|BadResponseError|BadURIError|Bag|Base64Factory_|BaseDublinCoreModel|BaseEmitter|BaseListener|BaseModel|BaseNode|BaseParser|BaseTrackBackModel|BasetypeFactory_|Base|BasicAuth|BasicLog|BasicWriter|Binding|BlankLine|BodyTypeBasic|BodyTypeMessage|BodyTypeMultipart|BodyTypeText|Body|Breakable|BrokenLibrary|BufError|BufferedReader|BuiltInCommand|ByeResponseError|CData|CGIHandler|CGIStubCreator|CGIStub|CGI|CHMGenerator|CNAME|CRCError|CUI|C_Parser|CategoriesBase|Categories|CategoryBase|Category|Cat|Cell|ChangeWorkspace|ChannelBase|Channel|CharsetConversionError|CharsetError|Charset|Child|Choice|ClassDefCreatorSupport|ClassDefCreator|ClassDef|ClassDescription|ClassEntry|ClassModule|ClientError|ClientSkeltonCreator|CloudBase|Cloud|CodeGen|CodeObject|Collector|CommandProcessor|CommentDef|Comment|Completion|ComplexContent|ComplexType|CompositeNotifier|Concat|ConditionVariable|Config|ConnectedUDP|ConnectionData|Console|Constants|Constant|ContentModel|Content|ContextExtender|ContextUser|Context|ConversionError|Converter|Cookie|Copy|CramMD5Authenticator|CurrentWorkingWorkspace|Cyclic|DBM|DNS|DOTDigraph|DOTEdge|DOTElement|DOTNode|DOTPort|DOTSimpleElement|DOTSubgraph|DRbArray|DRbBadScheme|DRbBadURI|DRbConnError|DRbConn|DRbError|DRbIdConv|DRbMessage|DRbObjectTemplate|DRbObject|DRbObservable|DRbProtocol|DRbRemoteError|DRbSSLSocket|DRbServerNotFound|DRbServer|DRbTCPSocket|DRbUNIXSocket|DRbUndumped|DRbUnknownError|DRbUnknown|DTD|Daemon|DataError|DataFormatError|DateTimeFactory_|DayBase|Day|Declaration|DecodeError|DefaultFileHandler|Default|Definitions|Deflate|Delete|Description|Diagram|DigestAuth|Dir|DocType|Documentation|Document|DomainName|DomainType|DriverCreator|Driver|DryRun|DublinCoreModel|E2MM|ECONNABORTED|ECONNRESET|EOFError|EPROTO|ERBHandler|Echo|ElementConstraintError|ElementDecl|Elements|Element|EmptyResponseError|EnclosureBase|Enclosure|EncodeError|EncodingStyleError|EncodingStyle|Encoding|EnhancedLabel|EnhancedProgressBar|EntityConst|EntityDecl|Entity|Enumeration|Enumerator|Env|Error|Err|Escape|Event|ExtServManager|ExtServ|ExtendCommandBundle|ExtendCommand|ExternalEntity|FTP|FactoryError|Factory|Failure|FaultError|FaultListItem|FaultList|Fault|FileHandler|FileInputMethod|FileStore|Filter|FloatConstants|Flow|Foreground|Fork|FormData|FormatDecodeError|FormatEncodeError|FormatError|FormatSpecifier|FormatString|Formatters|Formatter|Fortran95Definition|Fortran95parser|Fox|Fragment|Frame|Functions|GID|GTK2|GTK|GWIdConv|GW|GenSupport|GenericServer|Generic|Get|Glob|GroupQueue|Group|GuidBase|Guid|GzipFile|GzipReader|GzipWriter|HINFO|HTMLGeneratorInOne|HTMLGenerator|HTMLUtils|HTTPAuth|HTTPConfigLoader|HTTPError|HTTPExceptions|HTTPFatalError|HTTPGenericRequest|HTTPHeader|HTTPProxyServer|HTTPRequest|HTTPResponse|HTTPRetriableError|HTTPServerError|HTTPServerException|HTTPServer|HTTPServletError|HTTPServlet|HTTPStatus|HTTPStreamError|HTTPStreamHandler|HTTPS|HTTPUtils|HTTPVersion|HTTP|HandlerSet|Handler|HashFactory_|HeaderFault|Headers|Header|Heading|Head|Help|HistorySavingAbility|History|Hosts|HourBase|Hour|Htdigest|Htgroup|HtmlClass|HtmlExtension|HtmlFile|HtmlFormatter|HtmlMethod|Htpasswd|HyperlinkHtml|IMAP|IN|IOBuf|IOReader|IOSource|IPv4|IPv6|IconvCharset|IllegalFormatError|IllegalSequence|ImageBase|ImageFaviconBase|ImageFaviconModel|ImageFavicon|ImageItemBase|ImageItemModel|ImageItem|ImageModelUtils|Image|Importer|Import|IncludedModule|Include|Inflate|Info|InputCompletor|InputMethod|Instruction|Interleave|InvalidCharacter|InvalidComponentError|InvalidEncoding|InvalidHashTupleKey|InvalidIndexError|InvalidOption|InvalidRSSError|InvalidURIError|InvokeMethod18Mixin|IrbCommand|IrbLoader|Irb|ItemBase|ItemsBase|Items|Item|JobManager|Jobs|Kill|LDAP|LIST|Label|LengthError|Length|LeveledNotifier|LightParser|Light|LineCollection|LineReader|Lines|Line|ListBase|ListEnd|ListItem|ListStart|ListenerMixin|Listener|List|LiteralHandler|Li|LoadAbort|Loader|Load|Locale|LockModeFailer|Lock|LogDeviceMutex|LogDevice|LoginAuthenticator|Log|MIMEMessageError|MIMEMessage|MINFO|MPostUnavailableError|MX|MailTo|Maker|MappedException|MappingError|MappingRegistryCreator|Mapping|Map|MarkUp|Marshallable|Marshal|MemError|MemoryStore|MessageDecoder|MessageEncoder|Message|Meta|MethodDefCreator|MethodDefinitionError|MethodDef|MethodDescription|MethodEntry|MethodExtender|MethodSummary|MissingArgument|MissingAttributeError|MissingTagError|Mkcol|ModuleDef|ModuleDescription|MountTable|Move|Mutex|NSDBase|NSError|NS|NXDomain|NameInfo|NamedElements|NamedThing|Namespace|Name|NeedDict|NeedlessArgument|NetHttpClient|NoArgument|NoFooter|NoMsgNotifier|NoResponseError|NoWrite|NodeContainer|Node|Nop|NormalClass|NormalModule|NotAvailableValueError|NotExpectedTagError|NotSetError|NotValidXMLParser|NotWellFormedError|NotationDecl|Notifier|NotifyTemplateEntry|ObjectMixin|ObjectSpace|Object|Observable|Omap|OneOrMore|OpCode|OpenRead|OperationBinding|OperationInfo|Operation|OptionList|OptionMap|OptionalArgument|Optional|Options|OtherResolvError|OutOfRange|OutputMethod|Output|OverlappedPrefixError|OverstrikeFormatter|PATTERN|POP3|POPAuthenticationError|POPBadResponse|POPError|POPMail|PPMethods|PTR|Page|Pairs|Paragraph|ParameterError|Param|Parent|ParseError|ParseException|ParseFrame|ParserFactory|Parsers|Parser|Part|Pattern|PlacedArgument|PopWorkspace|PortType|Port|PostUnavailableError|Post|PreProcess|Pretty|PrivateType|ProcHandler|ProcWrapper|ProcessController|Processor|Property|Propfind|Proppatch|ProtoAuthError|ProtoCommandError|ProtoFatalError|ProtoRetriableError|ProtoServerError|ProtoSyntaxError|ProtoUnknownError|ProtocolError|ProxyAuthenticator|ProxyBasicAuth|ProxyDigestAuth|Proxy|PullEvent|PullParser|PushWorkspace|Put|QName|QueryExtension|Query|QuickPath|RCode|RDF|RDocError|Rdoc|REGEXP|REXMLLikeXMLParser|REXMLListener|REXMLParser|RIGenerator|RPCError|RPCRoutingError|RPC|RSS09|RSS10|RSS20|RSSBase|Reader|ReadlineInputMethod|Redirect|RefError|Ref|Registry|RelaxNG|RequestCanceledError|RequestError|RequestExpiredError|RequestScopeOperation|Requester|RequiredArgument|Require|ResolvError|ResolvTimeout|Resource|ResponseError|ResponseFormatError|ResponseParseError|Response|RiCache|RiReader|RiWriter|RindaError|RingFinger|RingProvider|RingServer|RootElementMixin|Router|Row|Rss|RubyParser|RubytypeFactory|Rule|SAX2Listener|SAX2Parser|SJISHandler|SLex|SMTPAuthenticationError|SMTPError|SMTPFatalError|SMTPServerBusy|SMTPSyntaxError|SMTPUnknownError|SMTP|SOAPAnySimpleType|SOAPAnyURI|SOAPArray|SOAPAttachment|SOAPBase64|SOAPBasetype|SOAPBody|SOAPBoolean|SOAPByte|SOAPCompoundtype|SOAPDateTime|SOAPDate|SOAPDecimal|SOAPDouble|SOAPDuration|SOAPElement|SOAPEnvelopeElement|SOAPEnvelope|SOAPException|SOAPExternalReference|SOAPFCGIRequest|SOAPFault|SOAPFloat|SOAPGDay|SOAPGMonthDay|SOAPGMonth|SOAPGYearMonth|SOAPGYear|SOAPGenerator|SOAPHandler|SOAPHeaderItem|SOAPHeader|SOAPHexBinary|SOAPInteger|SOAPInt|SOAPLong|SOAPMethodRequest|SOAPMethodResponse|SOAPMethod|SOAPModuleUtils|SOAPNegativeInteger|SOAPNil|SOAPNonNegativeInteger|SOAPNonPositiveInteger|SOAPPositiveInteger|SOAPQName|SOAPRawString|SOAPReference|SOAPRequest|SOAPShort|SOAPStdinRequest|SOAPString|SOAPStruct|SOAPTemporalObject|SOAPTime|SOAPType|SOAPUnknown|SOAPUnsignedByte|SOAPUnsignedInt|SOAPUnsignedLong|SOAPUnsignedShort|SOAPVoid|SOAPlet|SOAP|SOA|SRV|SSLConfig|Schema|Section|Sender|Sequence|Seq|ServantSkeltonCreator|Servant__|ServerError|Service|SessionManager|Session|Set|Severity|ShiftingError|SimpleContent|SimpleExtension|SimpleFormatter|SimpleHandler|SimpleMarkup|SimpleParser|SimpleRenewer|SimpleRestriction|SimpleServer|SimpleType|SingleClass|SingleLine|SkipDaysBase|SkipDays|SkipHoursBase|SkipHours|Socket|SourceBase|SourceFactory|Source|SpecialHash|Special|StandaloneServerStubCreator|StandaloneServer|State|Stats|Status|Stat|StdioInputMethod|StdioOutputMethod|Store|StreamBuf|StreamEnd|StreamError|StreamHandler|StreamListener|StreamParser|StreamUtils_|Stream|StringFactory_|StringInputMethod|StringReader|Str|Success|Switch|Syck|SyncEnumerator|SyndicationModel|SystemCommand|Sys|TCP|TXT|TaxonomyTopicBase|TaxonomyTopicModel|TaxonomyTopicsBase|TaxonomyTopicsModel|TaxonomyTopics|TaxonomyTopic|Tee|Telnet|TemplateEntry|Template|TestCase|TestResult|TestRunnerMediator|TestRunnerUtilities|TestRunner|TestSuite|TextFormatter|TextInput|TextinputBase|Textinput|Text|Timeout|TimerHolder2|TimerIdConv|TkError|TkId|TkKW|TkNode|TkOPASGN|TkOp|TkUnknownChar|TkVal|Tk|Tms|ToFlow|ToHtml|ToLaTeX|ToPublic|Token|TooMuchTagError|TopLevelEntry|TopLevel|TrackBackAboutBase|TrackBackAboutsBase|TrackBackAbouts|TrackBackAbout|TrackBackModel10|TrackBackModel20|TrackBackModel|TrackBackPing|TrackBackUtils|Trace|Transitive|TraverseSupport|TreeParser|TupleBag|TupleEntry|TupleSpaceProxy|TupleSpace|Tuple|TypeError|TypedArrayFactory_|TypedStructFactory_|Types|UID|UI|URIFactory_|UltraLightParser|UnconnectedUDP|UndefinedNamespaceException|UnexpectedElementError|UnhandledMustUnderstandHeaderError|Unique|Unit|UnknownAttributeError|UnknownCharsetError|UnknownConversionMethodError|UnknownElementError|UnknownLocker|UnknownTagError|Unlock|UserDB|Utils|Util|VARIANT|ValidationException|Validation|Validator|ValueSpaceError|Verbatim|Verbose|VersionError|WKS|WSDL2Ruby|WSDLDriverFactory|WSDLDriver|WSDLEncodedRegistry|WSDLLiteralRegistry|WaitTemplateEntry|Workspaces|WorkSpace|WriteAdapter|Writer|XMLDecl|XMLGenerator|XMLParserListener|XMLParserNotFound|XMLParserParser|XMLParser|XMLScanListener|XMLScanParser|XMLScanner|XMLSchema|XMLStyleSheetMixin|XMLStyleSheets|XMLStyleSheet|XMLTokens|XPathParser|XPath|XSD2Ruby|XSDAnySimpleType|XSDAnyURI|XSDBase64Binary|XSDBoolean|XSDByte|XSDDateTimeImpl|XSDDateTime|XSDDate|XSDDecimal|XSDDouble|XSDDuration|XSDError|XSDFloat|XSDGDay|XSDGMonthDay|XSDGMonth|XSDGYearMonth|XSDGYear|XSDHexBinary|XSDInteger|XSDInt|XSDLong|XSDNegativeInteger|XSDNil|XSDNonNegativeInteger|XSDNonPositiveInteger|XSDNormalizedString|XSDPositiveInteger|XSDQName|XSDShort|XSDString|XSDTime|XSDUnsignedByte|XSDUnsignedInt|XSDUnsignedLong|XSDUnsignedShort|YPath|YamlNode|ZeroOrMore)\b</string>
			<key>name</key>
			<string>support.class.core.sub.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b[A-Z]\w*(?=((\.|::)[A-Za-z]|\[))</string>
			<key>name</key>
			<string>support.class.ruby</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>adding all ? methods to a separate node, so that they can be highlighted</string>
			<key>match</key>
			<string>\b((absolute|active_job|active_jobs_exist|active|add|alive|all|allow_addr|allow_socket|any|apop|assigned_tag|assigned|attlistdecl|autoload|beginning_of_line|between|block_given|blockdev|body_exist|body_permitted|break|called_internally|canceled|casefold|cdata|changed|chardev|chunked|class_variable_defined|client_error|closed(_read|_write)?|comment|const_defined|coredump|count_space|debug|defined_in|deleted?|directory|disconnected|doctype|done|dst|element_initialize_arguments|element_local|element_qualified|elementdecl|empty|enclosed|end_element|ended|end|entitydecl|entity|eof|eos|eql|eqn|equal|error|esmtp|event|exclude_end|executable_real|executable|exists|exist|exited|expired|fatal|file_input|file|finished|finite|first|fnmatch|frozen|fu_have_symlink|fu_world_writable|gmt|gregorian_leap|gregorian|grpowned|has_(attributes|elements|expires|key|name|next|parts|text|value)|have_outparam|have_required_values|here|hierarchical|identical|in_service|include_attr|include|infinite|info|input|inspect|instance_of|instance_variable_defined|instruction|integer|ipv4(_compat|_mapped)?|ipv6|isBlank|is_a|is_binary_data|is_complex_yaml|is_eos|is_module|iterator|jobs_exist|julian(_leap)?|keep_alive|keyword|key|kind_of|leap|locked|macro_defined|map_as_array|matched|matches|match|mbchar|member|method_defined|modified|mountpoint|mu_locked|multipart|nan|next|nil|nonzero|not_modified|notationdecl|notify|optional|output|owned|parent|passed|peek_equal|peek_match|pipe|private_method_defined|prompting|proper_subset|proper_superset|protected_method_defined|proxy_class|proxy|public_method_defined|raise_for_undefined_entity|re_exchangeable|readable_atfer_eof|readable_real|readable|redirect|regular|relative|request_body_permitted|require_path_info|respond_to|response_body_permitted|rest|retval|root|run|safeconstname|safemethodname|safevarname|scalar_ptr_type|scalar_type|server_error|setgid|setuid|sid_available|signaled|single|singular|size|socket|square|stand_alone|start_element|started|sticky|stopped|stop|stream_end|subdomain_of|subset|succeed|success|superset|symlink|sync_exclusive|sync_locked|sync_point|sync_shared|tag_subclasses|tainted|terminated|text|trace|tty|uptodate|uri_registered|use_loader|use_ssl|utc|valid(_civil|_commercial|_jd|_ordinal|_time)?|value|verbose|version_1_1|version_1_2|visible|waiting_jobs_exist|waiting_job|wait|warn|weakref_alive|what_type|world(_readable|_writable)|writable(_real)?|xmldecl|zero)\?)|\b(\w+\?)</string>
			<key>name</key>
			<string>support.function.core.boolean.ruby</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>adding all = methods to a separate node, so that they can be highlighted </string>
			<key>match</key>
			<string>\b((JavaDSOCompatible|XMLDocument|abort_on_exception|accept_encoding_gzip|all_elements|allow_content_encoding_gzip|alternate|assigner|async|attributes|avail_out|binmode|body_stream|body|charset|chunked|codepage|command|comment|content_length|content_type|contentid|context|converter|critical|dataType|data|datetime_format|debug_level|debug|decode_typemap|default_parser_option|default_parser|default_record_separator|default_system_path|default|detail|delete|dn|do_validate|document_children|document_self|egid|elements?|encoding|endpoint_url|esmtp|euid|eval_history|expires|extensions|fault(actor|code|string)?|filter|form_data|fragment|generate_explicit_type|gid|groups|headers?|history_file|host|href|httpproxy|ignore_unknown_element|image_size|input|inspect_mode|level(_notifier)?|lineno|listener|local_name|log|mandatorycharset|mapping_registry|math_mode|maxgroups|max|mtime|namespace_context|namespaces?|name|next_sibling|nodeTypedValue|nodeValue|node|offset|ondataavailable|ongoing_visibility|onreadystatechange|ontransformnode|opaque|options|ordering|orig_name|output_encoding|params|parent|password|path|pointer|port|pos|previous_sibling|previous|priority|prompt_mode|proxy|query|quiet_mode|range|read_timeout|registry|resolveExternals|return_code|retval|run|save_history|scanner_kcode|scheme|scope|secure|sequence_elements|size|ssl_timeout|status|stdout|store|string|sy_updatePeriod|sync|system_path|targetnamespace|telnetmode|text|timeout|title|to|typecode|uid|url|use(_loader|_pp|_readline|_ssl|_tracer|rinfo|r)?|validateOnParse|value|variables|verbose|wiredump_dev|wiredump_file_base)=)|\b(\w+=)</string>
			<key>name</key>
			<string>support.function.core.setters.ruby</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>adding all ! methods to a separate node, so that they can be highlighted </string>
			<key>match</key>
			<string>\b((_make_regex|add|capitalize|chomp|chop|close|collect|compact|delete|downcase|exit|flatten|gsub|indent|kill|lstrip|map|mask|merge|new|next|normalize|order|parse|permute|power|reject|reverse|rstrip|save|select|slice|sort|squeeze|strip|sub|succ|swapcase|terminate|tr_s|tr|uniq|upcase)!)|\b(\w+!)</string>
			<key>name</key>
			<string>support.function.core.bangs.ruby</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>adding all Test::Unit methods to a separate node, so that they can be highlighted</string>
			<key>match</key>
			<string>\b(assert(_(block|equal(_float|s)?|exception|fail|in_delta|instance_of|kind_of|match(es)?|nil|no_(exception|match)|not_(equal|match|nil|same)|nothing_(raised|thrown)|operator|raises?|respond_to|same|send|throws))?|assign(_ns)?)\b|\b(assert_\w+)</string>
			<key>name</key>
			<string>support.function.core.testunit.ruby</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>adding all the core Ruby methods here to provide a visual aid for spelling errors, 
            as long as the current theme highlights [support.function] scopes.
            ie: if you miss type first as fisrt, then the word will not highlight.</string>
			<key>match</key>
			<string>\b(__(add_xmlele_value|attr_proxy|drbref|drburi|getobj__|id__|init__|send__|setobj__|xmlattr|xmlele)|_(basic_auth|dump|escape|getproperty|id2ref|invoke|load|make_regex|obj2soap|parse|setproperty|soap2obj|strptime|unescape)|abbrev(iate)?|abort(_on_exception)?|abs(2|olute(ChildNumber)?)?|accept(_blank_line|_heading|_list_end|_list_item|_list_start|_nonblock|_paragraph|_rule|_verbatim)?|access_log|acct|acosh?|activate|active_jobs|add(_(additional|alias|answer|assertion|attachment|attributes?|authenticator|authority|builtin_type|class(_or_module)?|constant|delegate_command_to_shell|dependency|document_method|document_operation|document_request_operation|domain_type|element|error|event_to_arry|factory|failure|fault|field|filter|finalizer|handler|headerhandler|hook|html|include|line_numbers|listener|maker|method(_as|_with_namespace(_as)?|_with_soapaction(_as)?)?|module|namespace|observer|part|path|private_type|protocol|question|reftarget|request_headerhandler|require|response_handler|row|rpc_(headerhandler|method(_as|_with_(namespace(_as)?|soapaction(_as)?)?)?|operation|request_(operation|servant)|servant)|ruby_type|run|schedule|servant|special|suite|table_of_sections|tag|test|text|tokens?|to|type|tz|word_pair)|r)?|adler(32)?|ajd(_to_amjd|_to_jd)?|alias(_(command|extension|map)|es)|all(_classes_and_modules|_method_names|_methods|_names|_symbols|_waits|ocate)?|amjd(_to_ajd)?|ancestor(ChildNumber|s)|angle|annotate|app_scope_router|append(Child|Data|_(data|features|library))?|apply|aref(_to)?|arg(_config|s)?|arity|array_complextype|ary(2md|2soap)|as_(element|href|nil|string|struct|text|xsd)|ascend|asctime|asinh?|assoc|async|at(_exit|an(2|h)?)?|atime|attach_to_mediator|attlistdecl|attributes?(_of)?|auth_only|authenticate|autoload|avail(_in|_out|able_tags)|axe|b64encode|backtrace|banner|base(Name|name|type(_mapped_class)?)?|basic_auth|benchmark|binary_base64|bind(ings?)?|binmode|bitmap_for|blankline|blksize|block(_(scanf|yield)|quote|s)|bm(bm)?|body|bold_print|boolean|bottom|boundary|break(_(outmost_groups|points|to_newline)|able)|broadcast|build(2|_(alias_summary_list|attribute_list|class_list|constants_summary_list|include_list|indices|message|method_detail_list|method_summary_list|requires_list))?|bytes|call(_(finalizer|seq)|cc|er)?|can(_parse|cel|onical_each)|capability|capitalize|caption|captures|casecmp|cat(name)?|cc_command|cd(atas?)?|ceil(ing)?|center|cert(_from_file)?|challenge|change(_(attribute|privilege|tab|workspace)|d_attribute_by_name|d)|char(_no|acters?|set(_label|_map|_str)?)|chdir|check(_(break_points|encoding|fault|for_html_help_workshop|insecure_method|lexical_format|point|sizeof|suspend|type|until|uri)|box(_group)?|ing_for|ing_message)?|child(Nodes|Number|_(defined_complextype|type)|ren(_with_index)?)?|chmod(_R)?|chomp|choose_header|chop|chown(_R)?|chr(oot)?|cipher|civil(_to_jd)?|class(2(element|qname)|_(attribute_values|desc_path|eval|from_name|name|variable_get|variable_set|variables)|es(_and_modules)?|ify)|cleanpath|clear(_fault|_suspend)?|clone(Node|_ns)?|close(_on_terminate|_read|_write)?|cmd|cmp|codepage|coerce|collect(2|_(attributes|complextypes|documentparameter|elements|faulttypes|file|methods|rpcparameter|simpletypes))?|column(_(size|vectors?)|s)?|comma_breakable|command|comments?|commercial(_to_jd)?|commit|compact|compare(_(by(_row_vectors)?|file|language|stream))?|compile(_project)?|complete|component(_ary)?|compoundtype|concat|conf(ig(_string|uration)?)?|conj(ugate)?|connect(_nonblock|ing|ions)?|const(_(from_name|get|load|missing|set)|ants)?|consume|contain(ed_(class_named|modules_matching)|s)|content(_(encoding|length|range|str|type)|id)?|context|conv(_(html|markup)|ert(_attrs|_html|_specials)?)?|cookie|copy(_(entry|file|stream|string))?|cosh?|count(_observers|_test_cases|_waiters)?|covector|cp(_r|p_command|p_include)?|crc(32|_table)?|create(Attribute|CDATASection|Comment|DocumentFragment|Driver|Element|EntityReference|Node|ProcessingInstruction|TextNode|_(application|button|class_name|contents_and_index|detail_panel|doc_param_def|docfile|driver|empty_object|entry|fault_list|fault_response|finalizer|from|header|help_project|info_panel|label|list_panel|listeners|main_panel|makefile|media_type|mediator|method_response|parser|progress_bar|project_file|refid|request|result|rpc_driver|rpc_param_def|self_signed_cert|source_code_file|subnode|suite_panel|text|tmpsrc|tooltip|win32ole_makefile|window))?|critical|crypt|ctime|current(_element|_group|_line|_server)?|cvs_url|cwday|cweek|cwyear|data(Type|_type)?|datetime_format|day(_fraction(_to_time)?)?|dclone|deafen|debug(_(command|eval|funcname|method_info|print_help|silent_eval|thread_info|variable_info))?|decode(64|_(ascii|attrs|b|cp1252|epilogue|eucjp|iconv|parent|prologue|rdata|sjis|tag(_end)?|text|unile|utf(16|7|8)))?|deep(_clone|_map)|def_(attr|builtin_commands|classvar|code|const|convert|delegators?|e2message|else_enc|exception|extend_command|head_option|iconv_convert|instance_delegators?|method|notifier|option|post_proc|pre_proc|privatemethod|protectedmethod|publicmethod|require|rules?|same_enc|singleton_delegators?|system_command|tail_option|to_euc_jp_from_iso_2022_jp|to_euc_jp_from_shift_jis|to_euc_jp_from_utf_8|to_iso_2022_jp_from_euc_jp|to_iso_8859_1_from_utf_8|to_shift_jis_from_euc_jp|to_shift_jis_from_utf_8|to_utf_8_from_euc_jp|to_utf_8_from_iso_8859_1|to_utf_8_from_shift_jis|token|uconv_convert_if_can)|default(_(acl|argc_limit|config_hash|handler|id_conv|load_limit|parser(_option)?|port|proc|record_separator|safe_level|system_path|test|))?|define(_(aliases|attr_accessor|class|finalizer|head|include|initialize|instance_variables|method(_missing)?|module|singleton_method|tail)|d_methods)?|definition|deflate|delete(Data|_(all(_by_dependant|_dependency)?|attribute|at|by_dependant|caller|dependency|element|field|if|namespace|observers?|passwd|unless_alive))?|denominator|depth|deq(uote)?|deref_key|derive_rpc_param_def|descend|description|deserialize|detach|detail|detect(_implicit)?|determinant|det|dev(_major|_minor)?|diagonal|diagram_reference|difference|dir(name|_(config|foreach|re))?|disable|disconnect(ing)?|dispid|display(_(attributes|class_info|class_list|expressions?|flow(_item)?|frames|heading|list|method_info|method_list|name|usage|verbatim_flow_item)|er)?|div(ert_read_from|ide|mod)?|dn|do_(GET|HEAD|OPTIONS|POST|parse|reply|validate|write)|doctype(_end)?|document(Element|_self|_send)?|double|downcase|downto|dowrite|dq|dqname|draw|draw_line|drop|dummy_makefile|dump(_method_signature|_stream)?|dup(_name)?|e2mm_message|each(2|_(active_object|additional|address|answer|attribute|authority|byte|capitalized|capitalized_name|char|child|classmodule|cons(tant)?|data|document|element(_with_attribute|_with_text)?|entry|filename|header|index|key|line|mail|method|name(_of)?|node|ns|object|option(_pair)?|pair|path|port|question|recursive|resource|slice|strongly_connected_component|strongly_connected_component_from|top_level_statement|value|with_index))?|echo|edit|egid|egrep_cpp|eid|element(decl|form(default)?|s)|elename2name|emit(ter)?|enable(_config)?|enclose|encode(64|_(ascii|child|cp1252|data(_end)?|element|epilogue|eucjp|iconv|name(_end)?|prologue|rawstring|rdata|sjis|string|tag(_end)?|unile|utf16|utf7|utf8))?|encoding(_conv|_from_xml|_method|_to_xml)?|endElement|end_accepting|end_document|end_element|end_prefix_mapping|end_regexp|endpoint_url|england|enq|entities|entitydecl|entity|entries|enum_cons|enum_for|enum_slice|enum_with_index|environment|eof|epilogue|erfc?|errno|error(Code|_count|_message|_size)?|escape(8bit|Element|HTML|_(form|path))?|esmtp|euid|eval_input|evaluate|eval|event_interface|event_type|examine|exception|exception_complextype|exclusive_unlock|exclusive|excn_handle|exec_if|execute|exec|exit_value|exitstatus|exit|expand|expand_line|expand_path|expand_ref_in|expanded_name|expected|expires|expunge|exp|extend_object|extend_to|extended|extensions|external_to_internal|extname|extract_resources|extract|factory|failed|failure_count|failure_size|fail|fatal|fault2exception|fault_complextype|faultactor|faultcode|faultstring|fault|fcntl|fetch_server|fetch|file_attribute_values|file_field|filename_to_label|filename_to_version|fileno|filepos|fill_breakable|fill|filter_backtrace|filter_ns|filter|finalize_all_by_dependant|finalize_all_dependency|finalize_all|finalize_by_dependant|finalize_dependency|finalizers|find(_(all_template|all|aryelement|arytype|binding|class_by_name|class_named|class_or_module_named|element_by_name|element|enclosing_module_named|executable0|executable|first_recursive|header|library|local_symbol|mapped_obj_class|mapped_soap_class|message|methods|module_named|name|operation|part|proxy|scalar|symbol|system_command|test_cases))?|finger|finish_all_jobs|finished|finish|firstChild|first|fixup|flatten_merge|flatten|flock|floor|flow|flunk|flush_next_in|flush_next_out|flush|fnmatch|fold|foo|for_fd|foreachline|foreach|fork|formatDate|formatIndex|formatNumber|formatTime|format_frame|format|form|fragment_for|frame_set_pos|freeze|frexp|from_iso_8859_15|from_obj|from_prime_division|front|fsync|ftype|full_class_names?|full_name|fully_expanded_name|function|garbage_collect|gcdlcm|gcd2?|gen_an_index|gen_class_index|gen_file_index|gen_into|gen_method_index|gen_url|generate(_(args|argtypes?|candidates|class(_info)?|constants|event|explicit_type|func_methods|line|method(_(args_help|body|help|info)|s)?|properties_with_args|propget_methods|propput_methods|propputref_methods|row|timeouts|xml))?|generic_parser|get(2|AllResponseHeaders|Attribute|AttributeNode|ElementsByTagName|NamedItem|QualifiedItem|ResponseHeader|_(attribute(_ns|s)?|bytes?|class|content|elements|fault|fields|file_and_line_from_caller|first|info_for|instance|labels?|length16|line(_types)?|method|name(space)?|option|passwd|print|question|read(ed)?|response|rr|string(_list)?|text|thread(_no)?|unpack)|acl|address(es)?|addrinfo|binaryfile|byte|c_already_read|c_of_rests|ch|c|dir|egid|env|euid|gid|gm|hostbyname|local|names?|opts|pgid|priority|quotaroot|quota|resources?|rlimit|servbyname|servername|sockopt|s|textfile|uid|utc|wd)?|gid|global_variables|glob|gmt_offset|gmtime|gmtoff|gm|grant_privilege|gregorian|grep|group_sub|groups|group|gsub|guard_inspect_key|guess1|guess2|guess_old|guess|guid|handle(r(1|2|3)?|_(special_(CROSSREF|HYPERLINK|TIDYLINK)))?|hasChildNodes|hasFeature|hash|have_children_elements|have_func|have_header|have_library|have_macro|have_struct_member|have_type|have_var|head2|head_level|headerhandler|headers_str|header|head|hello|help_output|helpcontext|helpfile|helpstring|help|hex|hidden|history_file|home_workspace|hour|href|html|html_escape|hton|http_default_port|http_url|httpdate|httpproxy|https_default_port|hypot|h|iconv|id2name|identify_comment|identify_gvar|identify_here_document|identify_identifier|identify_number|identify_quotation|identify_string|identity|id|ignore_unknown_element|ignore_whitespace_nodes|image|image_button|imag|img|implementation|import|im|inactivate|included|included_modules|incompatible_argument_styles|inc|indent_text|indent|index_in_parent|index_name|indexes|index|indices|induced_from|inflate|info|inherited|init_config|init_elements|init_error|init_mkmf|init_save_history|init_tags|initgroups|initialize_classes_and_modules|initialize_copy|initialize_http_header|initialize_input|initialize_methods_etc|initialize_tracer|init|inject|inner_product|ino|input_info|input_params|inputname|inputoperation_map|inputparts|insertBefore|insertData|insert_after|insert_before|insert|inspect|install(_(acl|alias_method|builtin_commands|class_name|date_element|dirs|dublin_core|extend_commands|files|get_text_element|have_attribute_element|have_child_element|have_children_element|id_conv|list|ns|rb|system_commands|taxo_topic|taxo_topics|text_element))?|instance_(eval|methods?|variable_get|variable_set|variables)|instructions?|internal_to_external|intern|interrupt|intersection|inverse_from|inverse|invert|invkind|invoke_kind|invoke|inv|ioctl|ip6_arpa|ip6_int|ipv4_compat|ipv4_mapped|irb_abort|irb_context|irb_exit|irb_level|irb_load|irb_original_method_name|irb_require|irb|is_ces|is_euc|is_sjis|is_us_ascii|is_utf8|isatty|isdst|iseuc|iso8601|issetugid|issjis|isutf8|italy|items?|jcount|jd(_to_ajd|_to_civil|_to_commercial|_to_ld|_to_mjd|_to_ordinal|_to_wday)?|jlength|jobs|join(_nowait)?|jsize|julian|kcode|kconv|key_from_file|keys|kill(_job)?|lambda|lang|last|lastChild|last_match|last_modified|last_spec|lazy_initialize|lchmod|lchown|lcm|ld_to_jd|ldexp|ld|length|letter|level|lex_init|lex_int2|lex|libpathflag|line_at|line_no|line_types|lineno|linepos|line|link_command|link|list_known_classes|list_known_names|listener|listen|listup|list|ljust|ln_s|ln_sf|ln|load(XML|property|_(documents|file|from|history|mime_types|modules|stream))?|local(time|_(assign|assign_hook|hook|name|referent|variables))?|locations?|lock|log10|log_src|logfile|login|logout|log|long_display|lookup_namespace_in|lookup_ring|lookup_ring_any|lookup_server|lookup|lstat|lstrip|lsub|ls|mails?|main_irb|main_thread|main_type|main|major_version|make(dirs|r(_target)?|_(expires|link|partial_content|passwd|stream|switch|symlink|thread_list|tuple))?|mandatorycharset|map_dir|mapping_registry|map2?|mark_marshalled_obj|mark_unmarshalled_obj|markup_code|markup|marshal_dump|marshal_load|marshal|mask_protected_sequences|mask|match_io|match_path|match_segment|match_to|match_to_consume|matched|matched_size|matchedsize|match|maxgroups|max|mday|mdtm|measure|media_subtype|members|memberwise|merge_in|merge_libs|merge|message_loop|messages|message|meta_vars|method_added|method_missing|method_removed|method_undefined|methods_matching|methods?|mime_contentid|mime_type|minor|minor_version|min|mjd_to_jd|mjd|mkcol|mkdir_p|mkdir|mkmf_failed|mkpath|mktime|models|mode|module_eval|module_from_name|module_named|modules|modulo|mon_enter|mon_exit|mon_synchronize|mon_try_enter|month|mon|mount_proc|mount|move|mtime|mu_extended|mu_lock|mu_synchronize|mu_try_lock|mu_unlock|multipart_form|must_C_version|must_call_validators|mv|n_bytes|n_jobs|n_mails|name2elename|namespaceURI|namespace_context|namespace_uri|namespaces?|name|native|navigate|ndq|need_initialize_variables|nest|nesting|new2|new_about|new_alias_name|new_category|new_cond|new_day|new_hour|new_item|new_ntoh|new_ostruct_member|new_start|new_taxo_topic|new_with|new_with_uri|new_with_value_if_need|new_xml_stylesheet|nextNode|nextSibling|next_current|next_element|next_sibling_node|next_wait|next_word|nitems|nkf|nlink|nlst|nodeFromID|nodeName|nodeType|nodeTypeString|nodeTypedValue|nodeValue|node_text|node_type|node|noop|normalize_path|normalize_space|normalized?|notationName|notationdecl|notations|notation|notify_listeners|notify_observers|notify|nowrite|now|ntop|num_waiting|number|numerator|o_chmod|obj2element|obj2soap|obj2xml|object_address_group|object_group|object_id|object_maker|oct|of2tz|offset|offset_vtbl|off|old|ole_classes|ole_free|ole_func_methods|ole_get_methods|ole_method|ole_method_help|ole_methods|ole_obj_help|ole_put_methods|ole_reference_count|ole_show_help|ole_type|ole_type_detail|oletypelib_name|on_attr_charref(_hex)?|on_attr_entityref|on_attr_value|on_attribute|on_chardata|on_charref_hex|on_charref|on_entityref|on_etag|on_event_with_outargs|on_event|on_head|on_inbound_headeritem|on_inbound|on_init|on_outbound_headeritem|on_outbound|on_simple_inbound|on_simple_outbound|on_stag_end|on_stag_end_empty|on_stag|on_tail|on_xmldecl_encoding|on_xmldecl_end|on_xmldecl_standalone|on_xmldecl_version|ondataavailable|onreadystatechange|on|open_message_stream|open_server_inaddr_any|open_server|opendir|open|operation_style|options|order|ordinal_to_jd|ordinal|orig_meta_vars|orig_name|orig_parse|orig_parse_uri|os_code|outparams|output_info|output_params|output_status|output_value|outputname|outputoperation_map|outputparts|output|out|ownerDocument|pack|param_count|param_seq|params|parentNode|parent_name|parent|parse(Args|Error|d|date|r(_for)?|_(args|attr|documents|element|epilogue|error|file(s_matching)?|form_data|header|helper|line|local|media_type|opts|printf_format|query|qvalues|range_header|resolv_conf|rhs|row|set_cookies?|source|stream|uri))?|partition|password_field|password|pass|path|pattern|peek_equal|peek|peep|peer_cert|peer_cert_chain|peeraddr|perform_with_block|permute|pid|pingecho|pipe|pkg_config|plural_forms|pointer|polar|pop_token|pop_workspace|popd|popdir|popen|popen3|popup_menu|pop|porttype|porttype_binding|porttypes|position|post2|post_form|post_match|postpone|postproc|post|pos|potentially_referenced_list|power2|pp_hash|pp_object|ppid|ppx|pp|pre_match|prec_f|prec_i|prec|predicate_to_string|predicate|prefix(es)?|prepare_backtrace|prepare_range|prepend|preprocess|preproc|preserveWhiteSpace|pretty_inspect|pretty_print_cycle|pretty_print_inspect|pretty_print_instance_variables|pretty_print|pretty|previousSibling|previous_element|previous_sibling_node|primary|prime_division|printUsageAndExit|print_profile|print_usage|printf|printn|print|priority|private_class_method|private_instance_methods|private_methods|process_args|process_class|process_controllers_exclusive|processingInstruction|processing_instruction|process|proc|progids?|program_name|progress_panel|progress|prompt|propfind|proppatch|protected_instance_methods|protected_methods|provide|proxy_address|proxy_auth|proxy_basic_auth|proxy_connect|proxy_pass|proxy_port|proxy_service|proxy_uri|proxy_user|proxyaddr|proxyport|prune|publicId|public_class_method|public_instance_methods|public_methods|pull|push_workspace|pushd|pushdir|push|put_bytes|put_label|put_labels|put_length16|put_name|put_pack|put_string|put_string_list|putbinaryfile|putc|puts|puttextfile|put|pwd|query|quick_emit|quit|quo|quote|racc_runtime_type|radio_button|radio_group|raise_fault|random_string|rand|range_length|range|rank|rassoc|raw_cookie2?|raw_path|raw_print_line|raw_show_fault|raw|rc_file_generators|rc_file|rdev_major|rdev_minor|rdev|rdiv|re_exchange|read_all|read_body|read_escape|read_from_cmdline|read_nonblock|read_type_class|read_up_to|read_with_substitution|readbytes|readchar|readlines?|readlink|readpartial|readyState|ready|read|realdir|realpath|realtime|real|reason_phrase|reason|receive|record_location|recover|recursive_collect|recursively_find_methods_matching|recv_nonblock|recv_reply|recv_request|recvfrom_nonblock|recvfrom|recv|reduce|refelement|referred|refidstr|regexp|regist|regist_server|register_uri|register|rehash|reject|relative_path_from|release|reload|remainder|remove(Attribute(Node)?|Child|NamedItem|QualifiedItem|_(class(_variable|es_and_modules)?|const|dir|entry(_secure)?|file|finalizer|handler|instance_variable|listener|methods_etc|method|private_comments|response_handler|server))?|rename|renew|reopen|replaceChild|replaceData|replace_child|replace_node|replace_with|replace|reply_service|report_class_stuff|report_method_stuff|report_missing_documentation|request_body|request_default_encodingstyle|request_get|request_head|request_post|request_uri|request|require_from_name|required_prefix|required_uri|required_variable_names|reset_all|reset_stream|reset_ui|reset|resolveExternals|resolver|resolv|resources|responseBody|responseStream|responseText|responseXML|response_default_encodingstyle|response_obj|response|rest_size|restore|restsize|rest|result_changed|result|resume_all|resume|retrbinary|retrlines|return_code|return_type_detail|return_type|return_vtype|reverse_each|reverse|rewind|rfc1123_date|rfc2822|rfc822|rid|rindex|rjust|rm_f|rm_r|rm_rf|rmdir|rmtree|rm|root_node|rootnode|roots?|round|route_from|route_to|route|row_size|row_vector|row_vectors|rows?|rpc_call|rpower|rsqrt|rss|rstrip|run_asserts|run_button|run_config|run_suite|run_tests|run|safe_iconv|safe_level|safe_unlink|safeconstname|safemethodname|safevarname|safe|save_cookie_store|save_history|save|scalar|scan_full|scan_until|scanf|scan|schema_attribute_definition|schema_element_definition|schema_ns_definition|schema_type_definition|scope|screen_data|scrolling_list|search_file_from_ruby_path|search_full|search_servlet|search|section|sec|seek|selectNodes|selectSingleNode|select_message|select|send_body|send_header|send_mail|send_message|send_reply|send_request|send_response|sendcmd|sender|sendmail|send|separator|seplist|seq_map_shortcut|seq|serialize|serve|services?|set(Attribute(Node)?|Expression|NamedItem|OrAnd|Parenthesis|RequestHeader|_(attributes|attrs|backtrace|basic_auth|close_on_exec|content_type|cookie(_store)?|current_section|debug_output|dictionary|dn|encoded|eoutvar|error|extensions|fcgi_request|filter|form_data|fragment|get_line_procs|headers|host|input|last_thread|last_value|log|non_blocking|opaque|options?|outparam|param|passwd|password|path|port|prompt|query|range|redirect|registry|scheme|scope|socket|sockopt|ssl_config|style|suspend|text|token_position|to|trace(_all|_func)?|typecode|user(info)?|via|visibility_for|wiredump_file_base)|acl|egid|euid|gid|iv2obj|iv2soap|pgid|pgrp|priority|property|quota|regid|resgid|resuid|reuid|rgid|rlimit|ruid|sid|sockopt|ter|uid|up_assert|up_certificate|up_header|up_maker|up_maker_elements|up_mediator|up_params|up_ssl_context|up_ui|up)?|sfork|shellwords|shift|short_display|show_fault|show_version|shutdown|signal_handle|signal_status|signal|simple|sin|single_character_display|singleline_format|singleline_pp|singleton(_(method_added|method_removed|method_undefined|methods))?|single|sinh|site|size_opt_params|size_params|size|skip_inner_expression|skip_until|skip|sleep|slice|soap2array|soap2obj|soap_rpc_complextypes|soapaction|soapbody_use|soapoperation_name|soapoperation_style|sort(_by)?|source(_file)?|spec_count|specified|splitText|split_field|split_header_value|split_into_flow|split|sprintf|sqrt|squeeze|srand|srcText|src_type|ssl_config_int|ssl_context|ssl_context_accessor|ssl_timeout|stamp|start(Element|ed|ing|s_with|_(accepting|collecting_tokens|command_line_test|doc|document|element|export|import|job|prefix_mapping|profile|service|ui))?|stat(us(Text|_line)?)?|stdout|step|stop_doc|stop_msg_loop|stop_next|stop_profile|stop_service|stopping|stopsig|stop|storbinary|store|storlines|streamhandler|stream|strftime|string_length|string_value|string|strip_attributes|strip_leading|strip_output|strip|strongly_connected_components|strptime|style_url|sub_type|submit|subscribe|substitute_into|substringData|substring_after|substring_before|substring|subtract|sub?|success|succ|suite|summarize|sum|superclass_string|superclass|suspend_all|suspend_context|suspend_input_method|suspend_name|suspend_workspace|suspend|swapcase|switch|switch_name|symlink|sym|sync_extended|sync_lock|sync_synchronize|sync_try_lock|sync_unlock|synchronize|sync|sysaccept|syscall|syscopy|sysopen|sysread|sysseek|systemId|system|syswrite|tagName|tag_class|tag_end|tag_name|tag_start|tagged_classes|tagurize|tag|taint|take|tanh?|targetnamespace|target|teardown|tee|tell|telnetmode|terminate_job|terminate|termsig|test__invoke|test_bracket_equal_with_arg|test_class_to_s|test_const_CP_ACP|test_const_CP_MACCP|test_const_CP_OEMCP|test_const_CP_SYMBOL|test_const_CP_THREAD_ACP|test_const_CP_UTF7|test_const_CP_UTF8|test_convert_bignum|test_dispid|test_each|test_event|test_event_interface|test_finished|test_get_win32ole_object|test_helpcontext|test_helpfile|test_helpstring|test_input|test_invoke|test_invoke_kind|test_loopback_response|test_name|test_no_exist_property|test_offset_vtbl|test_ole_func_methods|test_ole_get_methods|test_ole_invoke_with_named_arg|test_ole_invoke_with_named_arg_last|test_ole_method_help|test_ole_methods|test_ole_put_methods|test_ole_type|test_ole_type_detail|test_on_event|test_on_event2|test_on_event3|test_on_event4|test_openSchema|test_optional|test_output|test_return_type|test_return_type_detail|test_return_vtype|test_s_codepage|test_s_codepage_changed|test_s_codepage_set|test_s_connect|test_s_const_load|test_s_new|test_s_new_DCOM|test_s_new_from_clsid|test_s_ole_classes|test_s_progids|test_s_typelibs|test_sapi|test_setproperty|test_setproperty_bracket|test_setproperty_with_equal|test_src_type|test_started|test_to_s|test_typekind|test_value|test_variables|test_variant|test_visible|test|text_field|textarea|textinput|texts|text|thnum|thread_list|thread_list_all|thread|time_to_day_fraction|timeout|times|title|tmpdir|to_ary|to_a|to_class_name|to_date|to_datetime|to_element_methods|to_elename|to_enum|to_e|to_f|to_hash|to_id|to_int|to_io|to_iso_8859_15|to_i|to_mailtext|to_name|to_obj|to_proc|to_re|to_rfc822text|to_rss|to_r|to_set|to_str|to_string|to_sym|to_s|to_time|to_xml|to_yaml_properties|to_yaml_style|to_yaml|today|toeuc|tojis|token|token_stream|top|top_level_namespace|toplevel|tosjis|total_in|total_out|touch|toutf16|toutf8|tr_s|trace_func|trace_var|trace|transaction|transact|transfer|transformNodeToObject|transformNode|transform|translate|transpose|trap|traverse|truncate|try_compile|try_constant|try_cpp|try_do|try_func|try_implicit|try_link0?|try_lock|try_mon_enter|try_run|try_static_assert|try_var|tr|tsort_each|tsort_each_child|tsort_each_node|tsort|tv_sec|tv_usec|type_name|type_params|typekind|typelibs|types|type|tz2of|uid(_copy|_fetch|_search|_sort|_store|_thread|l)?|umask|umount|unalias_command|unbind|uncapitalize|undef_method|undef_system_command|undefine_finalizer|unescape(Element|HTML|_form)?|ungetc?|union|uniq(ueID|ue_id)?|unknown|unlink|unlock|unmarshal|unmask_protected_sequences|unmount|unnormalized?|unpack|unregist|unscan|unshift|unsubscribe|untaint|untrace_var|unused|upcase|update|upto|uri(_option)?|url(_encode)?|usage(_no_exit)?|use(_loader|_registry|_ssl)|usec|user(info)?|utc(_offset)?|utime|valid_error|validate(OnParse|_for_stream|_one_tag_name)?|value(_hash|s_at|s)?|var(_list|iable_kind|iables|kind)|ver(bose|ion(_1_(1|2)?)?)?|virtual_host|visibility|voidcmd|w3cdtf|wait(2|_all_jobs_execution|_until|_while|all|for|ing|ing_jobs|pid2?)?|wakeup|warning|warn|wday|wellformed_error|whitespace|width|winsep|wiredump_(dev|file_base)|with(_cflags|_config|_cppflags|_destdir|_friend|_ldflags)?|workspaces|wrap|write(_attribute_text|_cdata|_comment|_document|_element|_extra_pages|_html_on|_instruction|_nonblock|_on|_service|_text|_with_substitution)?|xml(2obj|Decl|_decl|_encoding_label|decl|schema)?|xmp|xpath|xpopen|xsystem|yaml_(initialize|new|tag_class_name|tag_read_class)|yday|year|zero|zip|zlib_version|zone(_offset)?)\b</string>
			<key>name</key>
			<string>support.function.core.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b[A-Z]\w*\b</string>
			<key>name</key>
			<string>variable.other.constant.ruby</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)
			         (?=def\b)                                                      # an optimization to help Oniguruma fail fast
			         (?&lt;=^|\s)(def)\s+                                              # the def keyword
			         ( (?&gt;[a-zA-Z_]\w*(?&gt;\.|::))?                                   # a method name prefix
			           (?&gt;[a-zA-Z_]\w*(?&gt;[?!]|=(?!&gt;))?                              # the method name
			           |===?|&gt;[&gt;=]?|&lt;=&gt;|&lt;[&lt;=]?|[%&amp;`/\|]|\*\*?|=?~|[-+]@?|\[\]=?) )  # …or an operator method
			         \s*(\()                                                        # the openning parenthesis for arguments
			        </string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.def.ruby</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ruby</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>the method pattern comes from the symbol pattern, see there for a explaination</string>
			<key>contentName</key>
			<string>variable.parameter.function.ruby</string>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function.method.with-arguments.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)
			         (?=def\b)                                                      # an optimization to help Oniguruma fail fast
			         (?&lt;=^|\s)(def)\s+                                              # the def keyword
			         ( (?&gt;[a-zA-Z_]\w*(?&gt;\.|::))?                                   # a method name prefix
			           (?&gt;[a-zA-Z_]\w*(?&gt;[?!]|=(?!&gt;))?                              # the method name
			           |===?|&gt;[&gt;=]?|&lt;=&gt;|&lt;[&lt;=]?|[%&amp;`/\|]|\*\*?|=?~|[-+]@?|\[\]=?) )  # …or an operator method
			         [ \t]                                                          # the space separating the arguments
			         (?=[ \t]*[^\s#])                                               # make sure arguments and not a comment follow
			        </string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.def.ruby</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>same as the previous rule, but without parentheses around the arguments</string>
			<key>contentName</key>
			<string>variable.parameter.function.ruby</string>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>meta.function.method.with-arguments.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.def.ruby</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string> the optional name is just to catch the def also without a method-name</string>
			<key>match</key>
			<string>(?x)
			         (?=def\b)                                                           # an optimization to help Oniguruma fail fast
			         (?&lt;=^|\s)(def)\b                                                    # the def keyword
			         ( \s+                                                               # an optional group of whitespace followed by…
			           ( (?&gt;[a-zA-Z_]\w*(?&gt;\.|::))?                                      # a method name prefix
			             (?&gt;[a-zA-Z_]\w*(?&gt;[?!]|=(?!&gt;))?                                 # the method name
			             |===?|&gt;[&gt;=]?|&lt;=&gt;|&lt;[&lt;=]?|[%&amp;`/\|]|\*\*?|=?~|[-+]@?|\[\]=?) ) )?  # …or an operator method
			        </string>
			<key>name</key>
			<string>meta.function.method.without-arguments.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(0[xX]\h(?&gt;_?\h)*|\d(?&gt;_?\d)*(\.(?![^[:space:][:digit:]])(?&gt;_?\d)*)?([eE][-+]?\d(?&gt;_?\d)*)?|0[bB][01]+)\b</string>
			<key>name</key>
			<string>constant.numeric.ruby</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>:'</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.constant.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'</string>
			<key>name</key>
			<string>constant.other.symbol.single-quoted.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\['\\]</string>
					<key>name</key>
					<string>constant.character.escape.ruby</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>:"</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.constant.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>name</key>
			<string>constant.other.symbol.double-quoted.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>single quoted string (does not allow interpolation)</string>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\'|\\\\</string>
					<key>name</key>
					<string>constant.character.escape.ruby</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>double quoted string (allows for interpolation)</string>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>`</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>execute string (allows for interpolation)</string>
			<key>end</key>
			<string>`</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.interpolated.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%x\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>execute string (allow for interpolation)</string>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.interpolated.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_curly_i</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%x\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>execute string (allow for interpolation)</string>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.interpolated.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_brackets_i</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%x\&lt;</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>execute string (allow for interpolation)</string>
			<key>end</key>
			<string>\&gt;</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.interpolated.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_ltgt_i</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%x\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>execute string (allow for interpolation)</string>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.interpolated.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_parens_i</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%x([^\w])</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>execute string (allow for interpolation)</string>
			<key>end</key>
			<string>\1</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.interpolated.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)
			   (?:
			     ^                      # beginning of line
			   | (?&lt;=                   # or look-behind on:
			       [=&gt;~(?:\[,|&amp;;]
			     | [\s;]if\s			# keywords
			     | [\s;]elsif\s
			     | [\s;]while\s
			     | [\s;]unless\s
			     | [\s;]when\s
			     | [\s;]assert_match\s
			     | [\s;]or\s			# boolean opperators
			     | [\s;]and\s
			     | [\s;]not\s
			     | [\s.]index\s			# methods
			     | [\s.]scan\s
			     | [\s.]sub\s
			     | [\s.]sub!\s
			     | [\s.]gsub\s
			     | [\s.]gsub!\s
			     | [\s.]match\s
			     )
			   | (?&lt;=                  # or a look-behind with line anchor:
			        ^when\s            # duplication necessary due to limits of regex
			      | ^if\s
			      | ^elsif\s
			      | ^while\s
			      | ^unless\s
			      )
			   )
			   \s*((/))(?![*+{}?])
			</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>string.regexp.classic.ruby</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>regular expressions (normal)
			we only start a regexp if the character before it (excluding whitespace)
			is what we think is before a regexp
			</string>
			<key>contentName</key>
			<string>string.regexp.classic.ruby</string>
			<key>end</key>
			<string>((/[eimnosux]*))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%r\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>regular expressions (literal)</string>
			<key>end</key>
			<string>\}[eimnosux]*</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.regexp.mod-r.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_curly_r</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%r\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>regular expressions (literal)</string>
			<key>end</key>
			<string>\][eimnosux]*</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.regexp.mod-r.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_brackets_r</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%r\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>regular expressions (literal)</string>
			<key>end</key>
			<string>\)[eimnosux]*</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.regexp.mod-r.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_parens_r</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%r\&lt;</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>regular expressions (literal)</string>
			<key>end</key>
			<string>\&gt;[eimnosux]*</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.regexp.mod-r.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_ltgt_r</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%r([^\w])</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>regular expressions (literal)</string>
			<key>end</key>
			<string>\1[eimnosux]*</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.regexp.mod-r.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%[QWSR]?\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>literal capable of interpolation ()</string>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.other.literal.upper.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_parens_i</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%[QWSR]?\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>literal capable of interpolation []</string>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.other.literal.upper.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_brackets_i</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%[QWSR]?\&lt;</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>literal capable of interpolation &lt;&gt;</string>
			<key>end</key>
			<string>\&gt;</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.other.literal.upper.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_ltgt_i</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%[QWSR]?\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>literal capable of interpolation -- {}</string>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.ruby.mod</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_curly_i</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%[QWSR]([^\w])</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>literal capable of interpolation -- wildcard</string>
			<key>end</key>
			<string>\1</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.other.literal.upper.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%([^\w\s=])</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>literal capable of interpolation -- wildcard</string>
			<key>end</key>
			<string>\1</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.other.literal.other.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%[qws]\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>literal incapable of interpolation -- ()</string>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.other.literal.lower.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\\)|\\\\</string>
					<key>name</key>
					<string>constant.character.escape.ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_parens</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%[qws]\&lt;</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>literal incapable of interpolation -- &lt;&gt;</string>
			<key>end</key>
			<string>\&gt;</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.other.literal.lower.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\\&gt;|\\\\</string>
					<key>name</key>
					<string>constant.character.escape.ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_ltgt</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%[qws]\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>literal incapable of interpolation -- []</string>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.other.literal.lower.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\\]|\\\\</string>
					<key>name</key>
					<string>constant.character.escape.ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_brackets</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%[qws]\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>literal incapable of interpolation -- {}</string>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.other.literal.lower.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\\}|\\\\</string>
					<key>name</key>
					<string>constant.character.escape.ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_curly</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%[qws]([^\w])</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>literal incapable of interpolation -- wildcard</string>
			<key>end</key>
			<string>\1</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.other.literal.lower.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Cant be named because its not neccesarily an escape.</string>
					<key>match</key>
					<string>\\.</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.constant.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>symbols</string>
			<key>match</key>
			<string>(?&lt;!:)(:)(?&gt;[a-zA-Z_]\w*(?&gt;[?!]|=(?![&gt;=]))?|===?|&gt;[&gt;=]?|&lt;[&lt;=]?|&lt;=&gt;|[%&amp;`/\|]|\*\*?|=?~|[-+]@?|\[\]=?|@@?[a-zA-Z_]\w*)</string>
			<key>name</key>
			<string>constant.other.symbol.ruby</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>^=begin</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>multiline comments</string>
			<key>end</key>
			<string>^=end</string>
			<key>name</key>
			<string>comment.block.documentation.ruby</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.ruby</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:^[ \t]+)?(#).*$\n?</string>
			<key>name</key>
			<string>comment.line.number-sign.ruby</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>
			matches questionmark-letters.

			examples (1st alternation = hex):
			?\x1     ?\x61

			examples (2nd alternation = octal):
			?\0      ?\07     ?\017

			examples (3rd alternation = escaped):
			?\n      ?\b

			examples (4th alternation = meta-ctrl):
			?\C-a    ?\M-a    ?\C-\M-\C-\M-a

			examples (4th alternation = normal):
			?a       ?A       ?0 
			?*       ?"       ?( 
			?.       ?#
			
			
			the negative lookbehind prevents against matching
			p(42.tainted?)
			</string>
			<key>match</key>
			<string>(?&lt;!\w)\?(\\(x\h{1,2}(?!\h)\b|0[0-7]{0,2}(?![0-7])\b|[^x0MC])|(\\[MC]-)+\w|[^\s\\])</string>
			<key>name</key>
			<string>constant.numeric.ruby</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>^__END__\n</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>string.unquoted.program-block.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>__END__ marker</string>
			<key>contentName</key>
			<string>text.plain</string>
			<key>end</key>
			<string>(?=not)impossible</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=&lt;?xml|&lt;(?i:html\b)|!DOCTYPE (?i:html\b))</string>
					<key>end</key>
					<string>(?=not)impossible</string>
					<key>name</key>
					<string>text.html.embedded.ruby</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>text.html.basic</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&gt;\=\s*&lt;&lt;(\w+))(?!\s+#\s*([Cc]|sh|[Jj]ava))</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\1$</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.unquoted.heredoc.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&gt;&lt;&lt;-HTML\b)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>heredoc with embedded HTML and indented terminator</string>
			<key>contentName</key>
			<string>text.html.embedded.ruby</string>
			<key>end</key>
			<string>\s*HTML$</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.unquoted.embedded.html.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>text.html.basic</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&gt;&lt;&lt;-SQL\b)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>heredoc with embedded SQL and indented terminator</string>
			<key>contentName</key>
			<string>text.sql.embedded.ruby</string>
			<key>end</key>
			<string>\s*SQL$</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.unquoted.embedded.sql.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.sql</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&gt;&lt;&lt;-(["\\']?)(\w+_(?i:eval))\1)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>ruby code in heredoc, interpolated</string>
			<key>end</key>
			<string>\s*\2$</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.unquoted.embedded.ruby.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&gt;&lt;&lt;-(\w+))</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>heredoc with indented terminator</string>
			<key>end</key>
			<string>\s*\1$</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.unquoted.heredoc.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&gt;\=\s*&lt;&lt;(\w+))(?=\s+#\s*[Cc](?!(\+\+|[Ss][Ss])))</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\1$</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.unquoted.embedded.c.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.c</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&gt;\=\s*&lt;&lt;(\w+))(?=\s+#\s*[Cc]\+\+)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\1$</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.unquoted.embedded.cplusplus.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.c++</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&gt;\=\s*&lt;&lt;(\w+))(?=\s+#\s*[Cc][Ss][Ss])</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\1$</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.unquoted.embedded.css.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.css</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&gt;\=\s*&lt;&lt;(\w+))(?=\s+#\s*[Jj]ava[Ss]cript)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\1$</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.unquoted.embedded.js.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&gt;\=\s*&lt;&lt;(\w+))(?=\s+#\s*sh)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\1$</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ruby</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.unquoted.embedded.shell.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.shell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&lt;=\{|do|\{\s|do\s)(\|)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.variable.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\|)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>[_a-zA-Z][_a-zA-Z0-9]*</string>
					<key>name</key>
					<string>variable.other.block.ruby</string>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>punctuation.separator.variable.ruby</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>=&gt;</string>
			<key>name</key>
			<string>punctuation.separator.key-value</string>
		</dict>
		<dict>
			<key>match</key>
			<string>&lt;&lt;=|%=|&amp;=|\*=|\*\*=|\+=|\-=|\^=|\|{1,2}=|/=|&lt;&lt;</string>
			<key>name</key>
			<string>keyword.operator.assignment.augmented.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>&lt;=&gt;|&lt;(?!&lt;|=)|&gt;(?!&lt;|=|&gt;)|&lt;=|&gt;=|===|==|=~|!=|!~|(?&lt;=[ \t])\?</string>
			<key>name</key>
			<string>keyword.operator.comparison.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;=[ \t])!+|\bnot\b|&amp;&amp;|\band\b|\|\||\bor\b|\^</string>
			<key>name</key>
			<string>keyword.operator.logical.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(%|&amp;|\*\*|\*|\+|\-|/)</string>
			<key>name</key>
			<string>keyword.operator.arithmetic.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>=</string>
			<key>name</key>
			<string>keyword.operator.assignment.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\||~|&gt;&gt;</string>
			<key>name</key>
			<string>keyword.operator.other.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>:</string>
			<key>name</key>
			<string>punctuation.separator.other.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\;</string>
			<key>name</key>
			<string>punctuation.separator.statement.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>,</string>
			<key>name</key>
			<string>punctuation.separator.object.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\.|::</string>
			<key>name</key>
			<string>punctuation.separator.method.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\{|\}</string>
			<key>name</key>
			<string>punctuation.section.scope.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\[|\]</string>
			<key>name</key>
			<string>punctuation.section.array.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\(|\)</string>
			<key>name</key>
			<string>punctuation.section.function.ruby</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>escaped_char</key>
		<dict>
			<key>match</key>
			<string>\\(?:[0-7]{1,3}|x[\da-fA-F]{1,2}|.)</string>
			<key>name</key>
			<string>constant.character.escape.ruby</string>
		</dict>
		<key>heredoc</key>
		<dict>
			<key>begin</key>
			<string>^&lt;&lt;-?\w+</string>
			<key>end</key>
			<string>$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>interpolated_ruby</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.embedded.ruby</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>source.ruby.embedded.source.empty</string>
						</dict>
					</dict>
					<key>match</key>
					<string>#\{(\})</string>
					<key>name</key>
					<string>source.ruby.embedded.source</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>#\{</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.embedded.ruby</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>name</key>
					<string>source.ruby.embedded.source</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#nest_curly_and_self</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.ruby</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(#@)[a-zA-Z_]\w*</string>
					<key>name</key>
					<string>variable.other.readwrite.instance.ruby</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.ruby</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(#@@)[a-zA-Z_]\w*</string>
					<key>name</key>
					<string>variable.other.readwrite.class.ruby</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.ruby</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(#\$)[a-zA-Z_]\w*</string>
					<key>name</key>
					<string>variable.other.readwrite.global.ruby</string>
				</dict>
			</array>
		</dict>
		<key>nest_brackets</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#nest_brackets</string>
				</dict>
			</array>
		</dict>
		<key>nest_brackets_i</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_brackets_i</string>
				</dict>
			</array>
		</dict>
		<key>nest_brackets_r</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_brackets_r</string>
				</dict>
			</array>
		</dict>
		<key>nest_curly</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#nest_curly</string>
				</dict>
			</array>
		</dict>
		<key>nest_curly_and_self</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\{</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.scope.ruby</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#nest_curly_and_self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>nest_curly_i</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_curly_i</string>
				</dict>
			</array>
		</dict>
		<key>nest_curly_r</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_curly_r</string>
				</dict>
			</array>
		</dict>
		<key>nest_ltgt</key>
		<dict>
			<key>begin</key>
			<string>\&lt;</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\&gt;</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#nest_ltgt</string>
				</dict>
			</array>
		</dict>
		<key>nest_ltgt_i</key>
		<dict>
			<key>begin</key>
			<string>\&lt;</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\&gt;</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_ltgt_i</string>
				</dict>
			</array>
		</dict>
		<key>nest_ltgt_r</key>
		<dict>
			<key>begin</key>
			<string>\&lt;</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\&gt;</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_ltgt_r</string>
				</dict>
			</array>
		</dict>
		<key>nest_parens</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#nest_parens</string>
				</dict>
			</array>
		</dict>
		<key>nest_parens_i</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_parens_i</string>
				</dict>
			</array>
		</dict>
		<key>nest_parens_r</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.ruby</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_parens_r</string>
				</dict>
			</array>
		</dict>
		<key>regex_sub</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arbitrary-repitition.ruby</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arbitrary-repitition.ruby</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\{)\d+(,\d+)?(\})</string>
					<key>name</key>
					<string>string.regexp.arbitrary-repitition.ruby</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\[(?:\^?\])?</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.character-class.ruby</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\]</string>
					<key>name</key>
					<string>string.regexp.character-class.ruby</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escaped_char</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.ruby</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>name</key>
					<string>string.regexp.group.ruby</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#regex_sub</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.ruby</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>We are restrictive in what we allow to go after the comment character to avoid false positives, since the availability of comments depend on regexp flags.</string>
					<key>match</key>
					<string>(?&lt;=^|\s)(#)\s[[a-zA-Z0-9,. \t?!-][^\x{00}-\x{7F}]]*$</string>
					<key>name</key>
					<string>comment.line.number-sign.ruby</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.ruby</string>
	<key>uuid</key>
	<string>5E0783A6-8962-4124-BEB5-CE392FDFBA66</string>
</dict>
</plist>
