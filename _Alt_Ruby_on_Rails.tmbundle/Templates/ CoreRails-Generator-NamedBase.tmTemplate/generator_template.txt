# include the CorePrint & Rails::Generator::Commands overrides
require File.expand_path(File.dirname(__FILE__) + "/../lib/rails_generator/commands.rb")

class <%= @tm_generator_class_name %> < Rails::Generator::NamedBase

  attr_reader   :controller_name,
                :controller_class_path,
                :controller_file_path,
                :controller_class_nesting,
                :controller_class_nesting_depth,
                :controller_class_name,
                :controller_singular_name,
                :controller_plural_name
  alias_method  :controller_file_name,  :controller_singular_name
  alias_method  :controller_table_name, :controller_plural_name
  
  def initialize(runtime_args, runtime_options = {})
    super

    # Take controller name from the next argument.  Default to the pluralized model name.
    @controller_name = args.shift
    @controller_name ||= ActiveRecord::Base.pluralize_table_names ? @name.pluralize : @name

    base_name, @controller_class_path, @controller_file_path, @controller_class_nesting, @controller_class_nesting_depth = extract_modules(@controller_name)
    @controller_class_name_without_nesting, @controller_singular_name, @controller_plural_name = inflect_names(base_name)

    if @controller_class_nesting.empty?
      @controller_class_name = @controller_class_name_without_nesting
    else
      @controller_class_name = "#{@controller_class_nesting}::#{@controller_class_name_without_nesting}"
    end
  end

  #
  def version
    'v0.1'
  end
  
  def manifest
    record do |m|
    
      # add code here
    
    end
  end

  # adds the name of the current rails directory to the m.template files
  def rails_project_dir
    rpd ||= File.basename(`pwd`).chomp
  end
  
  # adds the name of the current rails directory to the m.template files
  def rails_project_path
    rpp ||= `pwd`.chomp
  end
  
  # adds the humanized name of the rails project directory
  def rails_project_name
    # replace any "2_0" with "2.0"
    rpn ||= rails_project_dir.sub(/(\d)(_)(\d)/,'\1.\3').humanize
  end
  
  # adds the name of the current generator to the m.template files
  def generator_name
    File.basename(__FILE__,".rb").sub(/_generator/,'').chomp
  end
  
  def generator_ref_str
    "# generated by CoreGenerators :: #{generator_name} generator | #{version} | (#{Time.now.strftime('%Y-%d-%m')})"
  end
  
end